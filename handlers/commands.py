import asyncio
import logging
import json
import os
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters.command import Command

from config import ADMIN_CHAT_IDS, ERROR_LOG_CHANNEL_ID, ID_ADMIN_USER
from handlers.join import send_invite_links
import messages  # –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MORE_INFO_FILE –∏ DEFAULT_MORE_INFO

router = Router()

# Load command responses from commands.json
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # project root
commands_file = os.path.join(BASE_DIR, "commands.json")
try:
    with open(commands_file, "r", encoding="utf-8") as f:
        RESPONSES = json.load(f)
except Exception as e:
    logging.error(f"[CONFIG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å commands.json: {e}")
    RESPONSES = {}

# ---------------- existing handlers ----------------

@router.message(Command(commands=list(RESPONSES.keys())), F.reply_to_message)
async def handle_slash_command(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /sell_account –∏ /quit_gambling –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_id not in ADMIN_CHAT_IDS:
        logging.info(f"[IGNORED] –ö–æ–º–∞–Ω–¥–∞ –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–º —á–∞—Ç–µ {chat_id}.")
        return

    command_name = message.text.lstrip("/").split("@")[0].lower()
    if command_name not in RESPONSES:
        logging.info(f"[UNKNOWN] –ö–æ–º–∞–Ω–¥–∞ {command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    member = await message.bot.get_chat_member(chat_id, user_id)
    if member.status not in ("administrator", "creator"):
        logging.info(
            f"[IGNORED] {message.from_user.full_name} ({member.status}) "
            f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {message.text}."
        )
        return

    replied_msg = message.reply_to_message
    username_to_insert = (
        f"@{replied_msg.from_user.username}"
        if replied_msg.from_user.username
        else replied_msg.from_user.full_name
    )

    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"[FAIL DELETE CMD] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")

    tpl = RESPONSES[command_name]
    final_text = tpl.get("text", "").replace("{username}", username_to_insert)

    response_message = await message.bot.send_message(
        chat_id,
        final_text,
        reply_to_message_id=replied_msg.message_id,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

    if command_name == "sell_account" and tpl.get("autodelete", False):
        async def delete_later():
            await asyncio.sleep(120)
            try:
                await message.bot.delete_message(chat_id, replied_msg.message_id)
            except:
                pass
            try:
                await message.bot.delete_message(chat_id, response_message.message_id)
            except:
                pass

        asyncio.create_task(delete_later())


@router.message(Command("update_links"), F.chat.type == "private")
async def cmd_update_links(message: Message):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (1 —á–∞—Å, –ø–æ PRIVATE_DESTINATIONS).
    """
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏‚Ä¶")
    try:
        await send_invite_links(message.from_user.id)
    except Exception as e:
        logging.error(f"[UPDATE_LINKS] {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("report_the_bug"), F.chat.type == "private")
async def cmd_report_bug(message: Message):
    """
    –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    await message.answer(
        "–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É, –±–∞–≥ –∏–ª–∏ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â—É—é –∫–Ω–æ–ø–∫—É, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Å—é–¥–∞ @admi_ludochat"
    )

# --------------- new /setinfo handlers ----------------

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ admin-user, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
_setinfo_pending: set[int] = set()

@router.message(
    Command("setinfo"),
    F.from_user.id.in_(ID_ADMIN_USER),
    F.chat.type == "private"
)
async def cmd_setinfo(message: Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ MORE_INFO.
    –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MORE_INFO.")
    _setinfo_pending.add(message.from_user.id)


@router.message(
    F.from_user.id.in_(_setinfo_pending),
    F.from_user.id.in_(ID_ADMIN_USER),
    F.chat.type == "private"
)
async def process_setinfo(message: Message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç admin-user –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª more_info.html.
    """
    new_text = message.text
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        with open(messages.MORE_INFO_FILE, "w", encoding="utf-8") as f:
            f.write(new_text)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç MORE_INFO —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É.")
    except Exception as e:
        logging.error(f"[SETINFO ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å MORE_INFO: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
    finally:
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        _setinfo_pending.discard(message.from_user.id)
