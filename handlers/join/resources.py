import os
import logging
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from utils import get_bot
from storage import get_all_invite_links
from config import PRIVATE_DESTINATIONS, BOT_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BOT_ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
from services.invite_service import generate_invite_links  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫

router = Router()

async def send_chunked_message(chat_id: int, text: str, **kwargs):
    bot = get_bot()
    for start in range(0, len(text), 4096):
        await bot.send_message(chat_id, text[start:start+4096], **kwargs)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
async def read_advertisement_file(file_name):
    try:
        file_path = os.path.join('text', file_name)  # –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å main.py
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        return ""


async def send_resources_message(bot, user, uid, refresh=False, previous_message_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º –º–µ–Ω—é.
    –ï—Å–ª–∏ refresh=True, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏.
    """
    now = datetime.utcnow().replace(tzinfo=timezone.utc)
    expires_ts = int(now.timestamp()) + 3600  # 1 —á–∞—Å
    expires_iso = (now + timedelta(hours=1)).isoformat()

    bot_info = await bot.get_me()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    logging.info(f"[DEBUG] user: {user.full_name} (@{user.username or '–Ω–µ—Ç'}, ID: {uid}), bot: @{bot_info.username}, ID: {bot_info.id}")

    # –ü–æ–ª—É—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º invite-—Å—Å—ã–ª–∫–∏
    if refresh:
        logging.info(f"[INFO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid}")
        try:
            links, buttons = await generate_invite_links(
                bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                verify_user=None, ERROR_LOG_CHANNEL_ID=None
            )
        except Exception as e:
            logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid}: {e}")
            raise
    else:
        logging.info(f"[INFO] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        try:
            all_links = await get_all_invite_links(uid)
            if not all_links:
                logging.warning(f"[WARNING] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                logging.info(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid}")
                links, buttons = await generate_invite_links(
                    bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                    verify_user=None, ERROR_LOG_CHANNEL_ID=None
                )
            else:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                logging.info(f"[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è uid={uid}")
                buttons = []
                for dest in PRIVATE_DESTINATIONS:
                    cid = dest["chat_id"]
                    title = dest["title"]
                    description = dest.get("description", "")
                    link = next((x["invite_link"] for x in all_links if x["chat_id"] == cid), None)
                    if link:
                        buttons.append([{"text": title, "url": link, "description": description}])
                    else:
                        logging.error(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {title} —Å chat_id={cid}")

        except Exception as e:
            logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è uid={uid}: {e}")
            raise

    # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ advertisement_1.html –∏ advertisement_2.html
    advertisement_1_text = await read_advertisement_file('advertisement_1.html')
    advertisement_2_text = await read_advertisement_file('advertisement_2.html')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    text = "<b>–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ</b>:\n\n"
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML —Ñ–∞–π–ª–æ–≤
    text += f"<a href='{buttons[0][0]['url']}'>–õ—É–¥–æ—á–∞—Ç</a> ‚Äî {advertisement_1_text}\n\n"
    text += f"<a href='{buttons[1][0]['url']}'>–í—ã—Ä—É—á–∫–∞</a> ‚Äî {advertisement_2_text}\n\n"

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_{uid}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(f"–õ—É–¥–æ—á–∞—Ç —Å—Å—ã–ª–∫–∞: {buttons[0][0]['url']}")
    logging.info(f"–í—ã—Ä—É—á–∫–∞ —Å—Å—ã–ª–∫–∞: {buttons[1][0]['url']}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="–õ—É–¥–æ—á–∞—Ç", url=buttons[0][0]["url"]),
         InlineKeyboardButton(text="–í—ã—Ä—É—á–∫–∞", url=buttons[1][0]["url"]),
         InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏", callback_data=f"refresh_{uid}")],
        [
            InlineKeyboardButton(text="–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="section_projects"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="section_doctors"),
        ],
        [
            InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="section_work"),
            InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", callback_data="section_anonymity"),
        ],
    ])

    await send_chunked_message(
        uid,
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )



@router.callback_query(F.data.startswith("refresh_"))
async def on_refresh(query: CallbackQuery):
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    await query.answer("–û–±–Ω–æ–≤–ª—è—é —Ä–µ—Å—É—Ä—Å—ã‚Ä¶")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_query
    uid = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.from_user.id != uid:
        return await query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã.")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await send_resources_message(query.bot, query.from_user, uid, refresh=True)
