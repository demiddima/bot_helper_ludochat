# resources.py
# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: [function] ‚Äì user_id=‚Ä¶ ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ, try/except –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

import os
import logging
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
)
from aiogram.exceptions import TelegramBadRequest

from utils import get_bot
from storage import get_all_invite_links
from config import PRIVATE_DESTINATIONS, LOG_CHANNEL_ID
from services.invite_service import generate_invite_links
import messages  # —Ç–µ–∫—Å—Ç—ã –≤—ã–Ω–æ—Å–∏–º —Å—é–¥–∞

router = Router()

async def send_chunked_message(chat_id: int, text: str, **kwargs):
    func_name = "send_chunked_message"
    bot = get_bot()
    # –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –≤ —Å–∞–º—ã–π –Ω–∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (—Ä–µ—Å—É—Ä—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
    try:
        reply_markup = kwargs.get("reply_markup")
        if isinstance(reply_markup, InlineKeyboardMarkup):
            has_menu = any(
                isinstance(btn, InlineKeyboardButton)
                and (btn.callback_data or "").startswith("menu:open")
                for row in (reply_markup.inline_keyboard or [])
                for btn in row
            )
            if not has_menu:
                new_rows = list(reply_markup.inline_keyboard or [])
                new_rows.append([InlineKeyboardButton(text="üß≠ –ú–µ–Ω—é", callback_data="menu:open")])
                kwargs["reply_markup"] = InlineKeyboardMarkup(inline_keyboard=new_rows)
    except Exception as e:
        logging.error(f"user_id={chat_id} ‚Äì –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–ú–µ–Ω—é¬ª: {e}", extra={"user_id": chat_id})

    for start in range(0, len(text), 4096):
        try:
            await bot.send_message(chat_id, text[start:start+4096], **kwargs)
        except Exception as e:
            logging.error(
                f"user_id={chat_id} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ chunked message: {e}",
                extra={"user_id": chat_id}
            )
            try:
                kwargs.pop("reply_markup", None)
                await bot.send_message(chat_id, text[start:start+4096])
            except Exception as ee:
                logging.error(
                    f"user_id={chat_id} ‚Äì –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ chunked message: {ee}",
                    extra={"user_id": chat_id}
                )
                break

async def read_advertisement_file(file_name):
    func_name = "read_advertisement_file"
    try:
        file_path = os.path.join('text', file_name)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(
            f"user_id=system ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}",
            extra={"user_id": "system"}
        )
        return ""

async def send_resources_message(bot, user, uid, refresh=False, previous_message_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º –º–µ–Ω—é (inline).
    –ï—Å–ª–∏ refresh=True, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏.
    –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º: ¬´–ú–µ–Ω—é¬ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    func_name = "send_resources_message"
    try:
        now = datetime.utcnow().replace(tzinfo=timezone.utc)

        bot_info = await bot.get_me()
        logging.debug(
            f"user_id={uid} ‚Äì user: {user.full_name} (@{user.username or '–Ω–µ—Ç'}), bot: @{bot_info.username}, ID: {bot_info.id}",
            extra={"user_id": uid}
        )

        # –ü–æ–ª—É—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º invite-—Å—Å—ã–ª–∫–∏
        if refresh:
            logging.info(f"user_id={uid} ‚Äì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫", extra={"user_id": uid})
            links, buttons = await generate_invite_links(
                bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                verify_user=None, ERROR_LOG_CHANNEL_ID=None
            )
        else:
            all_links = await get_all_invite_links(uid)
            if not all_links:
                logging.warning(f"user_id={uid} ‚Äì –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ", extra={"user_id": uid})
                links, buttons = await generate_invite_links(
                    bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                    verify_user=None, ERROR_LOG_CHANNEL_ID=None
                )
            else:
                logging.info(f"user_id={uid} ‚Äì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏", extra={"user_id": uid})
                buttons = []
                for dest in PRIVATE_DESTINATIONS:
                    try:
                        cid = dest["chat_id"]
                        title = dest["title"]
                        description = dest.get("description", "")
                        if isinstance(cid, str) and cid.startswith("http"):
                            link = cid
                        else:
                            link = next((x["invite_link"] for x in all_links if x["chat_id"] == cid), None)

                        if link:
                            buttons.append([{"text": title, "url": link, "description": description}])
                        else:
                            logging.error(
                                f"user_id={uid} ‚Äì –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è ¬´{title}¬ª (chat_id={cid})",
                                extra={"user_id": uid}
                            )
                    except Exception as e:
                        logging.error(
                            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {dest}: {e}",
                            extra={"user_id": uid}
                        )
                        continue

        advertisement_1_text = await read_advertisement_file('advertisement_1.html')
        advertisement_2_text = await read_advertisement_file('advertisement_2.html')

        text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä. "
            "–ò–∑—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞–ª–∞–∂–∏–≤–∞–π—Ç–µ –∂–∏–∑–Ω—å.\n\n"
        )

        logging.info(f"user_id={uid} ‚Äì buttons: {buttons}", extra={"user_id": uid})

        text += f"<a href='{buttons[0][0]['url']}'><b>–õ—É–¥–æ—á–∞—Ç</b></a> ‚Äî {advertisement_1_text}\n\n"
        text += f"<a href='{buttons[1][0]['url']}'><b>–í—ã—Ä—É—á–∫–∞</b></a> ‚Äî {advertisement_2_text}\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–õ—É–¥–æ—á–∞—Ç", url=buttons[0][0]["url"]),
                InlineKeyboardButton(text="–í—ã—Ä—É—á–∫–∞", url=buttons[1][0]["url"]),
            ],
            [
                InlineKeyboardButton(text="–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="section_projects"),
                InlineKeyboardButton(text="–í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", callback_data="section_anonymity"),
            ],
            # –ö–Ω–æ–ø–∫–∞ ¬´üß≠ –ú–µ–Ω—é¬ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ send_chunked_message()
        ])

        await send_chunked_message(
            uid,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=keyboard,
        )

        log_message = (
            f"üîó –°—Å—ã–ª–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}\n"
            f"–õ—É–¥–æ—á–∞—Ç: {buttons[0][0]['url']}\n"
            f"–í—ã—Ä—É—á–∫–∞: {buttons[1][0]['url']}"
        )
        await send_chunked_message(
            LOG_CHANNEL_ID,
            log_message,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: {e}",
            extra={"user_id": uid}
        )
        raise

@router.callback_query(F.data.startswith("refresh_"))
async def on_refresh(query: CallbackQuery):
    func_name = "on_refresh"
    uid = query.from_user.id
    try:
        await query.answer("–û–±–Ω–æ–≤–ª—è—é —Ä–µ—Å—É—Ä—Å—ã‚Ä¶")
        await send_resources_message(query.bot, query.from_user, uid, refresh=True)
    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}",
            extra={"user_id": uid}
        )
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        except Exception as ee:
            logging.error(
                f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {ee}",
                extra={"user_id": uid}
            )

# ===== –ú–µ–Ω—é –∏ –†–∞—Å—Å—ã–ª–∫–∏ (–≠—Ç–∞–ø 1, –∑–∞–≥–ª—É—à–∫–∞) =====

def _subs_kb_stub(news: bool, meetings: bool, important: bool) -> InlineKeyboardMarkup:
    def label(name: str, state: bool) -> str:
        return f"{name}: {'–í–∫–ª' if state else '–í—ã–∫–ª'}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label("–ù–æ–≤–æ—Å—Ç–∏", news), callback_data="subs:toggle:news")],
        [InlineKeyboardButton(text=label("–í—Å—Ç—Ä–µ—á–∏", meetings), callback_data="subs:toggle:meetings")],
        [InlineKeyboardButton(text=label("–í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è", important), callback_data="subs:toggle:important")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:open")]
    ])

def _parse_states_from_markup(markup: InlineKeyboardMarkup) -> dict[str, bool]:
    states = {"news": False, "meetings": False, "important": False}
    if not markup or not getattr(markup, "inline_keyboard", None):
        return states
    for row in markup.inline_keyboard:
        for btn in row:
            t = (btn.text or "")
            if t.startswith("–ù–æ–≤–æ—Å—Ç–∏:"):
                states["news"] = "–í–∫–ª" in t
            elif t.startswith("–í—Å—Ç—Ä–µ—á–∏:"):
                states["meetings"] = "–í–∫–ª" in t
            elif t.startswith("–í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è:"):
                states["important"] = "–í–∫–ª" in t
    return states

@router.callback_query(F.data == "menu:open")
async def on_menu_open(query: CallbackQuery):
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é inline-–∫–Ω–æ–ø–∫–∏ ¬´üß≠ –ú–µ–Ω—é¬ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏:
    ‚Äì –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    uid = query.from_user.id
    try:
        await query.answer()
        # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—É–Ω–∫—Ç–æ–º ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∏")],
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶"
        )
        await query.bot.send_message(
            chat_id=uid,
            text=messages.get_menu_title_text(),  # <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>
            reply_markup=kb
        )
    except Exception as e:
        logging.error(f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é: {e}", extra={"user_id": uid})

@router.message(F.text.in_({"–†–∞—Å—Å—ã–ª–∫–∏", "üì£ –†–∞—Å—Å—ã–ª–∫–∏"}))
async def on_menu_subscriptions_message(msg: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–µ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –î–µ—Ñ–æ–ª—Ç—ã (–¥–µ–º–æ): –ù–æ–≤–æ—Å—Ç–∏ OFF, –í—Å—Ç—Ä–µ—á–∏ ON, –í–∞–∂–Ω—ã–µ ON.
    """
    uid = msg.from_user.id
    try:
        news, meetings, important = False, True, True
        await msg.answer(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb_stub(news, meetings, important)
        )
    except Exception as e:
        logging.error(f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –†–∞—Å—Å—ã–ª–æ–∫: {e}", extra={"user_id": uid})
        try:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª.")
        except Exception as ee:
            logging.error(f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {ee}", extra={"user_id": uid})

@router.callback_query(F.data.startswith("subs:toggle:"))
async def on_subs_toggle_stub(query: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤ –∑–∞–≥–ª—É—à–∫–µ: —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π.
    """
    uid = query.from_user.id
    try:
        kind = query.data.split(":")[-1]  # news|meetings|important
        current = _parse_states_from_markup(query.message.reply_markup)
        if kind in current:
            current[kind] = not current[kind]
        await query.message.edit_text(
            messages.get_subscriptions_text(current["news"], current["meetings"], current["important"]),
            reply_markup=_subs_kb_stub(current["news"], current["meetings"], current["important"])
        )
        await query.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ (–¥–µ–º–æ)")
    except Exception as e:
        logging.error(f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", extra={"user_id": uid})
        await query.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", show_alert=False)
