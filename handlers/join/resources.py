# resources.py
# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: [function] ‚Äì user_id=‚Ä¶ ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ, try/except –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

import os
import logging
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from utils import get_bot
from storage import get_all_invite_links
from config import PRIVATE_DESTINATIONS, LOG_CHANNEL_ID
from services.invite_service import generate_invite_links

router = Router()

async def send_chunked_message(chat_id: int, text: str, **kwargs):
    func_name = "send_chunked_message"
    bot = get_bot()
    for start in range(0, len(text), 4096):
        try:
            await bot.send_message(chat_id, text[start:start+4096], **kwargs)
        except Exception as e:
            logging.error(
                f"user_id={chat_id} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ chunked message: {e}",
                extra={"user_id": chat_id}
            )

async def read_advertisement_file(file_name):
    func_name = "read_advertisement_file"
    try:
        file_path = os.path.join('text', file_name)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(
            f"user_id=system ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}",
            extra={"user_id": "system"}
        )
        return ""

async def send_resources_message(bot, user, uid, refresh=False, previous_message_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º –º–µ–Ω—é.
    –ï—Å–ª–∏ refresh=True, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏.
    """
    func_name = "send_resources_message"
    try:
        now = datetime.utcnow().replace(tzinfo=timezone.utc)
        expires_ts = int(now.timestamp()) + 3600  # 1 —á–∞—Å
        expires_iso = (now + timedelta(hours=1)).isoformat()

        bot_info = await bot.get_me()
        logging.debug(
            f"user_id={uid} ‚Äì user: {user.full_name} (@{user.username or '–Ω–µ—Ç'}), bot: @{bot_info.username}, ID: {bot_info.id}",
            extra={"user_id": uid}
        )

        # –ü–æ–ª—É—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º invite-—Å—Å—ã–ª–∫–∏
        if refresh:
            logging.info(
                f"user_id={uid} ‚Äì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫",
                extra={"user_id": uid}
            )
            try:
                links, buttons = await generate_invite_links(
                    bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                    verify_user=None, ERROR_LOG_CHANNEL_ID=None
                )
            except Exception as e:
                logging.error(
                    f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: {e}",
                    extra={"user_id": uid}
                )
                raise
        else:
            try:
                all_links = await get_all_invite_links(uid)
                if not all_links:
                    logging.warning(
                        f"user_id={uid} ‚Äì –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ",
                        extra={"user_id": uid}
                    )
                    links, buttons = await generate_invite_links(
                        bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                        verify_user=None, ERROR_LOG_CHANNEL_ID=None
                    )
                else:
                    logging.info(
                        f"user_id={uid} ‚Äì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏",
                        extra={"user_id": uid}
                    )
                    buttons = []
                    for dest in PRIVATE_DESTINATIONS:
                        try:
                            cid = dest["chat_id"]
                            title = dest["title"]
                            description = dest.get("description", "")
                            if isinstance(cid, str) and cid.startswith("http"):
                                link = cid
                            else:
                                link = next((x["invite_link"] for x in all_links if x["chat_id"] == cid), None)

                            if link:
                                buttons.append([{"text": title, "url": link, "description": description}])
                            else:
                                logging.error(
                                    f"user_id={uid} ‚Äì –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è ¬´{title}¬ª (chat_id={cid})",
                                    extra={"user_id": uid}
                                )
                        except Exception as e:
                            logging.error(
                                f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {dest}: {e}",
                                extra={"user_id": uid}
                            )
                            continue
            except Exception as e:
                logging.error(
                    f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}",
                    extra={"user_id": uid}
                )
                raise

        advertisement_1_text = await read_advertisement_file('advertisement_1.html')
        advertisement_2_text = await read_advertisement_file('advertisement_2.html')

        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä. –ò–∑—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞–ª–∞–∂–∏–≤–∞–π—Ç–µ –∂–∏–∑–Ω—å.\n\n"

        logging.info(
            f"user_id={uid} ‚Äì buttons: {buttons}",
            extra={"user_id": uid}
        )

        text += f"<a href='{buttons[0][0]['url']}'><b>–õ—É–¥–æ—á–∞—Ç</b></a> ‚Äî {advertisement_1_text}\n\n"
        text += f"<a href='{buttons[1][0]['url']}'><b>–í—ã—Ä—É—á–∫–∞</b></a> ‚Äî {advertisement_2_text}\n\n"

        # logging.info(
        #     f"user_id={uid} ‚Äì –õ—É–¥–æ—á–∞—Ç —Å—Å—ã–ª–∫–∞: {buttons[0][0]['url']}",
        #     extra={"user_id": uid}
        # )
        # logging.info(
        #     f"user_id={uid} ‚Äì –í—ã—Ä—É—á–∫–∞ —Å—Å—ã–ª–∫–∞: {buttons[1][0]['url']}",
        #     extra={"user_id": uid}
        # )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–õ—É–¥–æ—á–∞—Ç", url=buttons[0][0]["url"]),
                InlineKeyboardButton(text="–í—ã—Ä—É—á–∫–∞", url=buttons[1][0]["url"]),
            #   InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏", callback_data=f"refresh_{uid}")
            ],
            [
                InlineKeyboardButton(text="–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="section_projects"),
                InlineKeyboardButton(text="–í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", callback_data="section_anonymity"),
            #    InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="section_doctors"),
            ],
            # [
            #     InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="section_work"),
            #     InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", callback_data="section_anonymity"),
            # ],
        ])

        await send_chunked_message(
            uid,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=keyboard,
        )

        log_message = (
            f"üîó –°—Å—ã–ª–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}\n"
            f"–õ—É–¥–æ—á–∞—Ç: {buttons[0][0]['url']}\n"
            f"–í—ã—Ä—É—á–∫–∞: {buttons[1][0]['url']}"
        )
        await send_chunked_message(
            LOG_CHANNEL_ID,
            log_message,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: {e}",
            extra={"user_id": uid}
        )
        raise

@router.callback_query(F.data.startswith("refresh_"))
async def on_refresh(query: CallbackQuery):
    func_name = "on_refresh"
    uid = query.from_user.id
    try:
        await query.answer("–û–±–Ω–æ–≤–ª—è—é —Ä–µ—Å—É—Ä—Å—ã‚Ä¶")
        await send_resources_message(query.bot, query.from_user, uid, refresh=True)
    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}",
            extra={"user_id": uid}
        )
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        except Exception as ee:
            logging.error(
                f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {ee}",
                extra={"user_id": uid}
            )
