# handlers/join/menu.py
# –ú–µ–Ω—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ (–≠—Ç–∞–ø 2: —Ä–µ–∞–ª—å–Ω—ã–π API)
# –ö–æ—Ä–ø. –ª–æ–≥–∏: [function] ‚Äì user_id=‚Ä¶ ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ

import logging
from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
)
import messages
from storage import (
    get_user_subscriptions,
    ensure_user_subscriptions_defaults,
    toggle_user_subscription,
)

router = Router(name="menu")


def _kb_label(name: str, state: bool) -> str:
    return f"{name}: {'–í–∫–ª' if state else '–í—ã–∫–ª'}"

def _subs_kb(news: bool, meetings: bool, important: bool) -> InlineKeyboardMarkup:
    """
    –†–∞—Å–∫–ª–∞–¥–∫–∞:
    [ –ù–æ–≤–æ—Å—Ç–∏ | –í—Å—Ç—Ä–µ—á–∏ ]
    [ –í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è ]
    [ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ]
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=_kb_label("–ù–æ–≤–æ—Å—Ç–∏", news), callback_data="subs:toggle:news"),
                InlineKeyboardButton(text=_kb_label("–í—Å—Ç—Ä–µ—á–∏", meetings), callback_data="subs:toggle:meetings"),
            ],
            [InlineKeyboardButton(text=_kb_label("–í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è", important), callback_data="subs:toggle:important")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:open")],
        ]
    )

def _extract_flags(rec: dict | None) -> tuple[bool, bool, bool]:
    if not rec:
        return False, True, True
    return (
        bool(rec.get("news_enabled", False)),
        bool(rec.get("meetings_enabled", True)),
        bool(rec.get("important_enabled", True)),
    )


@router.callback_query(F.data == "menu:open")
async def on_menu_open(query: CallbackQuery):
    """
    –ù–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ ¬´üß≠ –ú–µ–Ω—é¬ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏:
    ‚Äì –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    func_name = "on_menu_open"
    uid = query.from_user.id
    try:
        logging.info(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª", extra={"user_id": uid})
        await query.answer()
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∏")]],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
        )
        await query.bot.send_message(
            chat_id=uid,
            text=messages.get_menu_title_text(),  # "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>"
            reply_markup=kb,
        )
    except Exception as e:
        logging.error(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é: {e}", extra={"user_id": uid})


@router.message(F.text.in_({"–†–∞—Å—Å—ã–ª–∫–∏", "üì£ –†–∞—Å—Å—ã–ª–∫–∏"}))
async def on_menu_subscriptions_message(msg: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª: –±–µ—Ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î; –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã (OFF/ON/ON).
    """
    func_name = "on_menu_subscriptions_message"
    uid = msg.from_user.id
    try:
        logging.info(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –æ—Ç–∫—Ä—ã–≤–∞—é ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª (GET state)", extra={"user_id": uid})
        rec = await get_user_subscriptions(uid)   # {} –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
        if not rec:
            logging.info(f"[{func_name}] ‚Äì user_id={uid} ‚Äì state –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚áí —Å–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç—ã", extra={"user_id": uid})
            rec = await ensure_user_subscriptions_defaults(uid)

        news, meetings, important = _extract_flags(rec)
        await msg.answer(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb(news, meetings, important),
        )
    except Exception as e:
        logging.error(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª: {e}", extra={"user_id": uid})
        try:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª.")
        except Exception as ee:
            logging.error(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {ee}", extra={"user_id": uid})


@router.callback_query(F.data.startswith("subs:toggle:"))
async def on_subs_toggle(query: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏: –¥–µ–ª–∞–µ–º POST /subscriptions/{user_id}/toggle –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω.
    """
    func_name = "on_subs_toggle"
    uid = query.from_user.id
    try:
        kind = query.data.split(":")[-1]  # news|meetings|important
        logging.info(f"[{func_name}] ‚Äì user_id={uid} ‚Äì toggle kind={kind}", extra={"user_id": uid})

        rec = await toggle_user_subscription(uid, kind)
        news, meetings, important = _extract_flags(rec)

        await query.message.edit_text(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb(news, meetings, important),
        )
        await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"[{func_name}] ‚Äì user_id={uid} ‚Äì –û—à–∏–±–∫–∞ toggle: {e}", extra={"user_id": uid})
        await query.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", show_alert=False)
