# handlers/join/menu.py
# –ú–µ–Ω—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# –ö–æ—Ä–ø. –ª–æ–≥–∏: ‚Äì user_id=‚Ä¶ ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç)

import logging
from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
)
import messages
from storage import (
    get_user_subscriptions,
    ensure_user_subscriptions_defaults,
    toggle_user_subscription,
)

router = Router(name="menu")


def _kb_label(name: str, state: bool) -> str:
    return f"{name}: {'–í–∫–ª' if state else '–í—ã–∫–ª'}"


def _subs_kb(news: bool, meetings: bool, important: bool) -> InlineKeyboardMarkup:
    """
    –†–∞—Å–∫–ª–∞–¥–∫–∞:
    [ –ù–æ–≤–æ—Å—Ç–∏ | –í—Å—Ç—Ä–µ—á–∏ ]
    [ –í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è ]
    [ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ]
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=_kb_label("–ù–æ–≤–æ—Å—Ç–∏", news), callback_data="subs:toggle:news"),
                InlineKeyboardButton(text=_kb_label("–í—Å—Ç—Ä–µ—á–∏", meetings), callback_data="subs:toggle:meetings"),
            ],
            [InlineKeyboardButton(text=_kb_label("–í–∞–∂–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è", important), callback_data="subs:toggle:important")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:open")],
        ]
    )


def _extract_flags(rec: dict | None) -> tuple[bool, bool, bool]:
    if not rec:
        # –Ω–∞—à–∏ –¥–µ—Ñ–æ–ª—Ç—ã: news=False, meetings=True, important=True
        return False, True, True
    return (
        bool(rec.get("news_enabled", False)),
        bool(rec.get("meetings_enabled", True)),
        bool(rec.get("important_enabled", True)),
    )


@router.callback_query(F.data == "menu:open")
async def on_menu_open(query: CallbackQuery):
    """
    –ù–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ ¬´üß≠ –ú–µ–Ω—é¬ª:
    ‚Äì –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    uid = query.from_user.id
    try:
        logging.info("user_id=%s ‚Äì –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª", uid, extra={"user_id": uid})
        await query.answer()
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∏")]],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
        )
        await query.bot.send_message(
            chat_id=uid,
            text=messages.get_menu_title_text(),  # "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>"
            reply_markup=kb,
        )
    except Exception as e:
        logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é: %s", uid, e, extra={"user_id": uid})


@router.message(F.text.in_({"–†–∞—Å—Å—ã–ª–∫–∏", "üì£ –†–∞—Å—Å—ã–ª–∫–∏"}))
async def on_menu_subscriptions_message(msg: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª: –±–µ—Ä—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î; –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã.
    –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–ø–∏—Å–æ–∫ ¬´–≠—Ç–∞–ø 1‚Ä¶¬ª ‚Äî –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ messages.get_subscriptions_text(...).
    """
    uid = msg.from_user.id
    try:
        logging.info("user_id=%s ‚Äì –æ—Ç–∫—Ä—ã–≤–∞—é ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª (GET state)", uid, extra={"user_id": uid})

        rec = await get_user_subscriptions(uid)
        if not rec:
            logging.info("user_id=%s ‚Äì state –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚áí —Å–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç—ã", uid, extra={"user_id": uid})
            rec = await ensure_user_subscriptions_defaults(uid)

        news, meetings, important = _extract_flags(rec)
        await msg.answer(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb(news, meetings, important),
        )
    except Exception as e:
        logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª: %s", uid, e, extra={"user_id": uid})
        try:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª.")
        except Exception as ee:
            logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: %s", uid, ee, extra={"user_id": uid})


@router.callback_query(F.data == "subs:open")
async def on_subs_open_cb(query: CallbackQuery):
    """
    –ù–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ ¬´–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏¬ª –≤–Ω—É—Ç—Ä–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –û—Ç–∫—Ä—ã–≤–∞–µ–º ¬´üì£ –†–∞—Å—Å—ã–ª–∫–∏¬ª —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏–∑ –º–µ–Ω—é.
    """
    uid = query.from_user.id
    try:
        logging.info("user_id=%s ‚Äì –æ—Ç–∫—Ä—ã–≤–∞—é ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª (CB)", uid, extra={"user_id": uid})
        await query.answer()

        rec = await get_user_subscriptions(uid)
        if not rec:
            logging.info("user_id=%s ‚Äì state –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚áí —Å–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç—ã (CB)", uid, extra={"user_id": uid})
            rec = await ensure_user_subscriptions_defaults(uid)

        news, meetings, important = _extract_flags(rec)
        await query.message.answer(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb(news, meetings, important),
        )
    except Exception as e:
        logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª (CB): %s", uid, e, extra={"user_id": uid})
        try:
            await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª.")
        except Exception as ee:
            logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ (CB): %s", uid, ee, extra={"user_id": uid})


@router.callback_query(F.data.startswith("subs:toggle:"))
async def on_subs_toggle(query: CallbackQuery):
    """
    –¢—É–º–±–ª–µ—Ä—ã: –¥–µ—Ä–≥–∞–µ–º toggle –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω.
    """
    uid = query.from_user.id
    try:
        kind = query.data.split(":")[-1]  # news|meetings|important
        logging.info("user_id=%s ‚Äì toggle kind=%s", uid, kind, extra={"user_id": uid})

        rec = await toggle_user_subscription(uid, kind)
        news, meetings, important = _extract_flags(rec)

        await query.message.edit_text(
            messages.get_subscriptions_text(news, meetings, important),
            reply_markup=_subs_kb(news, meetings, important),
        )
        await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ toggle: %s", uid, e, extra={"user_id": uid})
        await query.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", show_alert=False)
