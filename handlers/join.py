\
# handlers/join.py
import logging
import re
from aiogram import Router, F
from aiogram.types import ChatJoinRequest, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError

from config import BOT_TOKEN, PUBLIC_CHAT_ID, LOG_CHANNEL_ID, ERROR_LOG_CHANNEL_ID, PRIVATE_DESTINATIONS
from storage import add_user, verify_user

router = Router()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
join_requests: dict[int, ChatJoinRequest] = {}

def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text or "")

@router.chat_join_request(F.chat.id == PUBLIC_CHAT_ID)
async def handle_join(update: ChatJoinRequest):
    user = update.from_user
    join_requests[user.id] = update

    text = (
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:\n\n"
        "‚Äì –≤—ã –Ω–µ –±–æ—Ç\n"
        "‚Äì –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –û—Ñ–µ—Ä—Ç–æ–π\n"
        "‚Äì —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î\n"
        "‚Äì –≤–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç\n\n"
        "–ß–∞—Ç ‚Äî –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. "
        "–û–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ª–µ—á–µ–Ω–∏–µ, —ç—Ç–æ –ª–∏—à—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞. "
        "–ï—Å–ª–∏ –≤–∞–º —Ç—è–∂–µ–ª–æ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n"
        "–í—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

    bot_username = (await bot.get_me()).username
    payload = f"verify_{user.id}"
    url = f"https://t.me/{bot_username}?start={payload}"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) —Å–æ –≤—Å–µ–º", url=url)
    ]])

    try:
        await bot.send_message(user.id, text, reply_markup=kb)
        logging.info(f"[SEND] –£—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except TelegramForbiddenError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ ERROR_LOG_CHANNEL_ID
        msg = (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
            f"{escape_markdown(user.full_name)} (@{escape_markdown(user.username or '')}, ID: `{user.id}`): "
            f"{escape_markdown(str(e))}"
        )
        logging.warning(f"[FAIL] {msg}")
        try:
            await bot.send_message(ERROR_LOG_CHANNEL_ID, msg, parse_mode=ParseMode.MARKDOWN)
        except Exception as log_e:
            logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

@router.message(F.text.startswith("/start"))
async def process_start(message: Message):
    parts = message.text.split()
    if len(parts) == 2 and parts[1].startswith("verify_"):
        try:
            uid = int(parts[1].split("_", 1)[1])
        except ValueError:
            return

        if message.from_user.id == uid and uid in join_requests:
            request = join_requests.pop(uid)

            # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
            try:
                await bot.approve_chat_join_request(PUBLIC_CHAT_ID, uid)
                logging.info(f"[APPROVE] –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –æ–¥–æ–±—Ä–µ–Ω–∞")
            except TelegramForbiddenError as e:
                log_msg = (
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {escape_markdown(str(e))}"
                )
                logging.warning(f"[FAIL] {log_msg}")
                try:
                    await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                except Exception as log_e:
                    logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

            user = message.from_user
            try:
                await add_user(uid, user.username, user.full_name)
            except Exception as e:
                log_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î {uid}: {escape_markdown(str(e))}"
                logging.error(f"[DB ERROR] {log_msg}")
                try:
                    await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                except Exception as log_e:
                    logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

            links = []
            buttons = []
            for dest in PRIVATE_DESTINATIONS:
                if not all(k in dest for k in ("title", "chat_id", "description")):
                    logging.error(f"[CONFIG ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç PRIVATE_DESTINATIONS: {dest}")
                    continue
                try:
                    invite = await bot.create_chat_invite_link(
                        chat_id=dest["chat_id"],
                        member_limit=1,
                        creates_join_request=False,
                        name=f"Invite for {user.username or user.id}"
                    )
                    try:
                        await verify_user(uid, invite.invite_link)
                    except Exception as e:
                        log_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è invite_link –¥–ª—è {uid}: {escape_markdown(str(e))}"
                        logging.error(f"[DB ERROR] {log_msg}")
                        try:
                            await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                        except Exception as log_e:
                            logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

                    links.append((dest["title"], invite.invite_link, dest["description"]))
                    buttons.append([InlineKeyboardButton(text=dest["title"], url=invite.invite_link)])
                except TelegramForbiddenError as e:
                    log_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invite link –¥–ª—è {uid} –≤ —á–∞—Ç–µ {dest['chat_id']}: {escape_markdown(str(e))}"
                    logging.warning(f"[FAIL] {log_msg}")
                    try:
                        await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                    except Exception as log_e:
                        logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

            test_link = links[0][1] if links else ""
            text2 = (
                "**–ó–¥–µ—Å—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã ¬´–õ—É–¥–æ—á–∞—Ç¬ª**\n\n"
                "[–õ—É–¥–æ—á–∞—Ç ¬∑ –ø–æ–º–æ—â—å –∏–≥—Ä–æ–∫–∞–º](https://t.me/+as3JmHK21sxhMGEy) ‚Äî —á–∞—Ç –≤–∑–∞–∏–º–æ–≤—ã—Ä—É—á–∫–∏...\n"
                "[–°–µ—Ä—ã–π –õ—É–¥–æ—á–∞—Ç](https://t.me/GrayLudoChat) ‚Äî ¬´—Å–µ—Ä—ã–µ¬ª —Ç–µ–º—ã (–ø—Ä–æ–¥–∞—Ç—å –ë–ö –∏ —Ç. –¥.)\n\n"
                "**–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã:**\n"
                "[12 —à–∞–≥–æ–≤](https://t.me/Ludo12Steps) ‚Äî ...\n"
                "[–ü–æ–ø-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è](https://t.me/LudoPopPsych) ‚Äî ...\n"
                "[–ù–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è](https://t.me/LudoScience) ‚Äî ...\n"
                f"[–¢–µ—Å—Ç]({test_link}) ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
                "**–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:**\n"
                "[–ê–Ω—Ç–∏–≥–µ–º–±–ª](https://t.me/antigambl) ‚Äî ...\n"
                "[–ë–ª–æ–≥ ¬´–õ—É–¥–æ—á–∞—Ç¬ª](https://t.me/LudoBlog) ‚Äî ...\n\n"
                "**–ù–∞—à–∏ –±–æ—Ç—ã:**\n"
                "[–í—ã—Ä—É—á–∫–∞](https://t.me/viruchkaa_bot?start=0012) ‚Äî ...\n"
                "[–ê–ª–≥–æ—Ä–∏—Ç–º](https://t.me/algorithmga_bot?start=0011) ‚Äî ..."
            )

            sent = False
            try:
                await bot.send_message(
                    uid, text2,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                    parse_mode=ParseMode.MARKDOWN
                )
                logging.info(f"[SEND] –°—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
                sent = True
            except TelegramForbiddenError as e:
                log_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ {uid}: {escape_markdown(str(e))}"
                logging.warning(f"[FAIL] {log_msg}")
                try:
                    await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                except Exception as log_e:
                    logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            log_text = (
                f"üë§ <b>{escape_markdown(user.full_name)}</b> (@{escape_markdown(user.username or '')})\n"
                f"üÜî <code>{user.id}</code>\n"
                "üì® –ó–∞–≤–µ—Ä—à–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø:\n"
            )
            for title, invite_link, _ in links:
                log_text += f"‚Äî <b>{escape_markdown(title)}</b>: {invite_link}\n"

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML, —á—Ç–æ–±—ã –Ω–µ –æ–ø–∞—Å–∞—Ç—å—Å—è Markdown-–æ—à–∏–±–æ–∫
                await bot.send_message(LOG_CHANNEL_ID, log_text, parse_mode="HTML")
                logging.info(f"[LOG] –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {LOG_CHANNEL_ID}")
            except Exception as e:
                log_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {uid} –≤ –∫–∞–Ω–∞–ª {LOG_CHANNEL_ID}: {escape_markdown(str(e))}"
                logging.warning(f"[FAIL] {log_msg}")
                try:
                    await bot.send_message(ERROR_LOG_CHANNEL_ID, log_msg, parse_mode=ParseMode.MARKDOWN)
                except Exception as log_e:
                    logging.error(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫: {log_e}")
        else:
            await message.reply(
                "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª –≤ –ø—É–±–ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∏ "
                "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) —Å–æ –≤—Å–µ–º¬ª."
            )
    else:
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª –≤ –ø—É–±–ª–∏—á–Ω–æ–º —á–∞—Ç–µ. "
            "–¢–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) —Å–æ –≤—Å–µ–º¬ª.")
