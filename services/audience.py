# services/audience.py
# –ï–î–ò–ù–´–ô –º–æ–¥—É–ª—å –∞—É–¥–∏—Ç–æ—Ä–∏–π:
#  - normalize_ids(text) ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ user_id
#  - audience_preview_text(target, limit) ‚Äî –ø—Ä–µ–≤—å—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (ALL/IDs/kind/SQL)
#  - materialize_all_user_ids(limit) ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è "ALL" –ø–æ membership‚Äô–∞–º –±–æ—Ç–∞
#  - resolve_audience(target) ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–≥–µ—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ ID
#  - iter_audience_kind(kind) ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–∏–ø (news/meetings/important)

from __future__ import annotations

import logging
from typing import Any, Dict, List, Optional, AsyncIterator, Iterable

import config
from services.db_api import db_api_client
from utils.common import log_and_report  # –æ—Ç—á—ë—Ç –≤ ERROR_LOG_CHANNEL_ID

log = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø–æ–ª—è –≤ user_subscriptions
KIND_FLAG: Dict[str, str] = {
    "news": "news_enabled",
    "meetings": "meetings_enabled",
    "important": "important_enabled",
}


# ---------- –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ID ----------

def normalize_ids(text: str) -> List[int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å ID: –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã/–∑–∞–ø—è—Ç—ã–µ/—Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π/—Ç–∞–±—É–ª—è—Ü–∏–∏/–∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫, —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ.
    """
    if not text:
        return []
    seps = ",;|\n\t\r"
    t = text
    for ch in seps:
        t = t.replace(ch, " ")
    t = t.replace("  ", " ")
    raw = t.split()
    out: List[int] = []
    seen = set()
    for chunk in raw:
        try:
            v = int(chunk)
        except Exception:
            continue
        if v not in seen:
            seen.add(v)
            out.append(v)
    return out


def _normalize_ids_list(val: Any) -> List[int]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ ID:
      - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç list/tuple/set/str/int/None;
      - —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ normalize_ids();
      - —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫.
    """
    if val is None:
        return []
    if isinstance(val, str):
        return normalize_ids(val)
    parts: Iterable[Any]
    if isinstance(val, (list, tuple, set)):
        parts = val
    else:
        parts = [val]
    out: List[int] = []
    seen = set()
    for p in parts:
        try:
            v = int(p)
        except Exception:
            continue
        if v not in seen:
            seen.add(v)
            out.append(v)
    return out


# ---------- PREVIEW / MATERIALIZE ALL ----------

async def audience_preview_text(target: Dict[str, Any], limit: int = 30) -> str:
    """
    –ü—Ä–µ–≤—å—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ¬´–≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ¬ª.
    target –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø—ã: ids/kind/sql/all (all –º–∞–ø–∏—Ç—Å—è –Ω–∞ kind|ids —Å–Ω–∞—Ä—É–∂–∏).
    """
    try:
        res = await db_api_client.audience_preview(target, limit=limit)
        total = int(res.get("total") or 0)
        sample = res.get("sample") or []
        lines = "\n".join(f"‚Ä¢ <code>{row}</code>" for row in sample)
        tail = f"\n{lines}" if lines else ""
        logging.info(
            "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏: —Ç–∏–ø=%s, total=%s, sample=%s",
            target.get("type"), total, len(sample),
            extra={"user_id": config.BOT_ID},
        )
        return f"üë§ –í—Å–µ–≥–æ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: <b>{total}</b>{tail}"
    except Exception as exc:
        logging.error(
            "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: —Ç–∏–ø=%s, –ª–∏–º–∏—Ç=%s, –æ—à–∏–±–∫–∞=%s",
            target.get("type"), limit, exc,
            extra={"user_id": config.BOT_ID},
        )
        await log_and_report(exc, f"–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç–∏–ø={target.get('type')}, –ª–∏–º–∏—Ç={limit}")
        return "‚ö†Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."


async def materialize_all_user_ids(limit: int = 1000) -> List[int]:
    """
    –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ¬´ALL¬ª —á–µ—Ä–µ–∑ membership‚Äô—ã –±–æ—Ç–∞ (chat_id=BOT_ID).
    –ü–∞–≥–∏–Ω–∏—Ä—É–µ–º list_memberships_by_chat(limit/offset) –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è.
    """
    out: List[int] = []
    seen = set()
    offset = 0
    total_rows = 0
    batches = 0
    try:
        while True:
            rows = await db_api_client.list_memberships_by_chat(config.BOT_ID, limit=limit, offset=offset)
            rows = rows or []
            if not rows:
                break
            batches += 1
            total_rows += len(rows)
            ids = []
            for r in rows:
                uid = (r.get("user_id") if isinstance(r, dict) else None)
                if isinstance(uid, int):
                    ids.append(uid)
            for v in ids:
                if v not in seen:
                    seen.add(v)
                    out.append(v)
            if len(rows) < limit:
                break
            offset += limit

        logging.info(
            "–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL: –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π=%s, –±–∞—Ç—á–µ–π=%s, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫=%s",
            len(out), batches, total_rows,
            extra={"user_id": config.BOT_ID},
        )
        return out

    except Exception as exc:
        logging.error(
            "–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chat_id=%s, –æ—à–∏–±–∫–∞=%s",
            config.BOT_ID, exc,
            extra={"user_id": config.BOT_ID},
        )
        await log_and_report(exc, f"–º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL, chat_id={config.BOT_ID}")
        return []


# ---------- KIND-–ê–£–î–ò–¢–û–†–ò–ò (–ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º) ----------

async def iter_audience_kind(kind: str) -> AsyncIterator[int]:
    """
    –ü–µ—Ä–µ–±–æ—Ä user_id, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:
      - –±–µ—Ä—ë–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ¬´—á–∞—Ç–∞ –±–æ—Ç–∞¬ª (chat_id = BOT_ID)
      - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_subscriptions.<flag>
    """
    flag_name = KIND_FLAG.get(kind)
    if not flag_name:
        log.warning("iter_audience_kind: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π kind=%s", kind, extra={"user_id": config.BOT_ID})
        return

    try:
        memberships = await db_api_client.list_memberships_by_chat(config.BOT_ID)
    except Exception as exc:
        log.error("iter_audience_kind: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è memberships: %s", exc, extra={"user_id": config.BOT_ID})
        return

    for m in (memberships or []):
        uid = m.get("user_id") if isinstance(m, dict) else None
        if not isinstance(uid, int):
            continue
        try:
            subs = await db_api_client.get_user_subscriptions(uid)
        except Exception as exc:
            log.error("iter_audience_kind: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: user_id=%s, err=%s", uid, exc, extra={"user_id": uid})
            continue
        if subs.get(flag_name):
            yield uid


# ---------- –†–ê–ó–í–û–†–ê–ß–ò–í–ê–ù–ò–ï TARGET –î–õ–Ø –†–ê–°–°–´–õ–û–ö ----------

async def resolve_audience(target: Optional[Dict[str, Any]]) -> List[int]:
    """
    –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ user_id.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º—ã:
      - {"type":"ids","user_ids":[...]}  ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è
      - {"type":"ids","ids":[...]}       ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
      - {"type":"kind","kind":"news|meetings|important"}
      - {"type":"sql","sql":"SELECT ... AS user_id"}  ‚Äî –ø–æ–∫–∞ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º)
    """
    if not target:
        log.warning("resolve_audience: target –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return []

    t = target.get("type")
    if t == "ids":
        raw = target.get("user_ids")
        if raw is None:
            raw = target.get("ids")  # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        ids = _normalize_ids_list(raw)
        log.info("resolve_audience(ids): %s —à—Ç.", len(ids), extra={"user_id": config.BOT_ID})
        return ids

    if t == "kind":
        kind = (target.get("kind") or "").strip()
        if not kind:
            log.warning("resolve_audience(kind): –ø—É—Å—Ç–æ–π kind")
            return []
        out: List[int] = []
        async for uid in iter_audience_kind(kind):
            out.append(uid)
        log.info("resolve_audience(kind=%s): %s —à—Ç.", kind, len(out), extra={"user_id": config.BOT_ID})
        return out

    if t == "sql":
        try:
            prev = await db_api_client.audience_preview({"type": "sql", "sql": target.get("sql")}, limit=1000)
            total = prev.get("total")
            log.warning(
                "resolve_audience(sql): SQL-–∞—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ (preview only), total=%s",
                total, extra={"user_id": config.BOT_ID}
            )
        except Exception as exc:
            log.error("resolve_audience(sql): –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: %s", exc, extra={"user_id": config.BOT_ID})
        return []

    log.warning("resolve_audience: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø target=%s", t, extra={"user_id": config.BOT_ID})
    return []


__all__ = [
    "normalize_ids",
    "audience_preview_text",
    "materialize_all_user_ids",
    "resolve_audience",
    "iter_audience_kind",
    "KIND_FLAG",
]
