# services/audience_service.py
# –ê—É–¥–∏—Ç–æ—Ä–∏–∏: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–≤—å—é, –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ¬´–≤—Å–µ–º¬ª

from __future__ import annotations

import logging
from typing import Any, Dict, List

import config
from services.db_api import db_api_client
from utils.common import log_and_report  # –æ—Ç—á—ë—Ç –≤ ERROR_LOG_CHANNEL_ID

log = logging.getLogger(__name__)


def normalize_ids(text: str) -> List[int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ID –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö int, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫."""
    out: List[int] = []
    seen = set()
    for chunk in (text or "").replace(",", " ").split():
        if chunk.isdigit():
            v = int(chunk)
            if v not in seen:
                seen.add(v)
                out.append(v)
    return out


async def audience_preview_text(target: Dict[str, Any], limit: int = 10_000) -> str:
    """
    –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (total + –ø—Ä–∏–º–µ—Ä).
    –õ–æ–≥–∏: –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É ‚Äî –∫–∞–∫–æ–π —Ç–∏–ø, –∫–∞–∫–æ–π –ª–∏–º–∏—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –Ω–∞—à–ª–∏.
    """
    try:
        prev = await db_api_client.audience_preview(target, limit=limit)
        total = prev.get("total", 0)
        sample = prev.get("sample") or []
        sample_txt = ", ".join(map(str, sample[:10])) if sample else ""
        tail = f"\n–ü—Ä–∏–º–µ—Ä ID: <code>{sample_txt}</code>" if sample_txt else ""

        logging.info(
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω: —Ç–∏–ø={target.get('type')}, –ª–∏–º–∏—Ç={limit}, –≤—Å–µ–≥–æ={total}",
            extra={"user_id": config.BOT_ID},
        )
        return f"üë§ –í—Å–µ–≥–æ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: <b>{total}</b>{tail}"
    except Exception as exc:
        logging.error(
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: —Ç–∏–ø={target.get('type')}, –ª–∏–º–∏—Ç={limit}, –æ—à–∏–±–∫–∞={exc}",
            extra={"user_id": config.BOT_ID},
        )
        await log_and_report(exc, f"–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç–∏–ø={target.get('type')}, –ª–∏–º–∏—Ç={limit}")
        return "‚ö†Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."


async def materialize_all_user_ids(limit: int = 1000) -> List[int]:
    """
    –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ¬´–í—Å–µ (ALL)¬ª —á–µ—Ä–µ–∑ membership‚Äô—ã –±–æ—Ç–∞ (chat_id = BOT_ID).
    –õ–æ–≥–∏: —Å—Ç–∞—Ä—Ç, –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –±–∞—Ç—á–∞–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
    """
    try:
        logging.info(
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL: —Å—Ç–∞—Ä—Ç –¥–ª—è chat_id={config.BOT_ID}, —à–∞–≥={limit}",
            extra={"user_id": config.BOT_ID},
        )

        ids: List[int] = []
        offset = 0
        total_rows = 0
        batches = 0

        while True:
            try:
                rows = await db_api_client.list_memberships_by_chat(
                    config.BOT_ID,
                    limit=limit,
                    offset=offset,
                )
            except TypeError:
                # –°–µ—Ä–≤–µ—Ä –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ‚Äî –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                rows = await db_api_client.list_memberships_by_chat(config.BOT_ID)

            if not rows:
                break

            batches += 1
            total_rows += len(rows)

            for r in rows:
                uid = r.get("user_id") if isinstance(r, dict) else None
                if isinstance(uid, int):
                    ids.append(uid)

            # –ö–æ–Ω–µ—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if not isinstance(rows, list) or len(rows) < limit:
                break

            offset += limit
            logging.info(
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL: –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á ‚Ññ{batches}, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫={total_rows}",
                extra={"user_id": config.BOT_ID},
            )

        # uniq —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
        seen = set()
        out: List[int] = []
        for v in ids:
            if v not in seen:
                seen.add(v)
                out.append(v)

        logging.info(
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL: –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π={len(out)}, –±–∞—Ç—á–µ–π={batches}, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫={total_rows}",
            extra={"user_id": config.BOT_ID},
        )
        return out

    except Exception as exc:
        logging.error(
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chat_id={config.BOT_ID}, –æ—à–∏–±–∫–∞={exc}",
            extra={"user_id": config.BOT_ID},
        )
        await log_and_report(exc, f"–º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è ALL, chat_id={config.BOT_ID}")
        return []
