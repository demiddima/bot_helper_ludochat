# handlers/join/resources.py
# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: [function] ‚Äì user_id=‚Ä¶ ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ, try/except –¥–ª—è –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

import os
import logging

from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from common.utils import get_bot
from storage import get_all_invite_links
from config import PRIVATE_DESTINATIONS, LOG_CHANNEL_ID
from Hallway.services.invite_service import generate_invite_links

router = Router()


async def send_chunked_message(chat_id: int, text: str, *, allow_group: bool = False, **kwargs):
    """
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã (chat_id < 0).
    –î–ª—è –ª–æ–≥-–∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø ‚Äî –ø–µ—Ä–µ–¥–∞–π allow_group=True —è–≤–Ω–æ.
    """
    func_name = "send_chunked_message"
    bot = get_bot()

    if chat_id < 0 and not allow_group:
        logging.info(f"[guard] skip send to group/channel chat_id={chat_id}")
        return

    # –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –≤ —Å–∞–º—ã–π –Ω–∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    try:
        reply_markup = kwargs.get("reply_markup")
        if isinstance(reply_markup, InlineKeyboardMarkup):
            has_menu = any(
                isinstance(btn, InlineKeyboardButton)
                and (btn.callback_data or "").startswith("menu:open")
                for row in (reply_markup.inline_keyboard or [])
                for btn in row
            )
            if not has_menu:
                new_rows = list(reply_markup.inline_keyboard or [])
                new_rows.append([InlineKeyboardButton(text="üß≠ –ú–µ–Ω—é", callback_data="menu:open")])
                kwargs["reply_markup"] = InlineKeyboardMarkup(inline_keyboard=new_rows)
    except Exception as e:
        logging.error(f"user_id={chat_id} ‚Äì –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–ú–µ–Ω—é¬ª: {e}", extra={"user_id": chat_id})

    for start in range(0, len(text), 4096):
        try:
            await bot.send_message(chat_id, text[start:start + 4096], **kwargs)
        except Exception as e:
            logging.error(
                f"user_id={chat_id} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ chunked message: {e}",
                extra={"user_id": chat_id}
            )
            try:
                kwargs.pop("reply_markup", None)
                await bot.send_message(chat_id, text[start:start + 4096])
            except Exception as ee:
                logging.error(
                    f"user_id={chat_id} ‚Äì –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ chunked message: {ee}",
                    extra={"user_id": chat_id}
                )
                break

async def read_advertisement_file(file_name):
    func_name = "read_advertisement_file"
    try:
        file_path = os.path.join('text', file_name)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(
            f"user_id=system ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}",
            extra={"user_id": "system"}
        )
        return ""


async def send_resources_message(bot, user, uid, refresh=False, previous_message_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏:
      1-—è —Å—Ç—Ä–æ–∫–∞: –õ—É–¥–æ—á–∞—Ç | –ü—Ä–∞–∫—Ç–∏—á–∞—Ç | –í—ã—Ä—É—á–∞—Ç (URL-–∫–Ω–æ–ø–∫–∏)
      2-—è —Å—Ç—Ä–æ–∫–∞: –ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ | –í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å (callback-–∫–Ω–æ–ø–∫–∏)
      3-—è —Å—Ç—Ä–æ–∫–∞: üß≠ –ú–µ–Ω—é (–∞–≤—Ç–æ–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ send_chunked_message)
    –ü—Ä–∏ refresh=True –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–∞–π—Ç—ã (–¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö chat_id).
    """
    func_name = "send_resources_message"
    try:
        bot_info = await bot.get_me()
        logging.debug(
            f"user_id={uid} ‚Äì user: {user.full_name} (@{user.username or '–Ω–µ—Ç'}), bot: @{bot_info.username}, ID: {bot_info.id}",
            extra={"user_id": uid}
        )

        # 1) –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), –Ω–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º –º–∞–ø–ø–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if refresh:
            logging.info(f"user_id={uid} ‚Äì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫", extra={"user_id": uid})
            _, buttons = await generate_invite_links(
                bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                verify_user=None, ERROR_LOG_CHANNEL_ID=None
            )
        else:
            all_links = await get_all_invite_links(uid)
            if not all_links:
                logging.warning(f"user_id={uid} ‚Äì –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ", extra={"user_id": uid})
                _, buttons = await generate_invite_links(
                    bot, user=user, uid=uid, PRIVATE_DESTINATIONS=PRIVATE_DESTINATIONS,
                    verify_user=None, ERROR_LOG_CHANNEL_ID=None
                )
            else:
                logging.info(f"user_id={uid} ‚Äì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏", extra={"user_id": uid})
                buttons = []
                for dest in PRIVATE_DESTINATIONS:
                    try:
                        cid = dest["chat_id"]
                        title = dest["title"]
                        description = dest.get("description", "")
                        if isinstance(cid, str) and cid.startswith("http"):
                            link = cid
                        else:
                            link = next((x["invite_link"] for x in all_links if x["chat_id"] == cid), None)
                        if link:
                            buttons.append([{"text": title, "url": link, "description": description}])
                        else:
                            logging.error(
                                f"user_id={uid} ‚Äì –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è ¬´{title}¬ª (chat_id={cid})",
                                extra={"user_id": uid}
                            )
                    except Exception as e:
                        logging.error(
                            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {dest}: {e}",
                            extra={"user_id": uid}
                        )

        # 2) –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ (–∂—ë—Å—Ç–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: 1‚Äî–õ—É–¥–æ—á–∞—Ç, 2‚Äî–ü—Ä–∞–∫—Ç–∏—á–∞—Ç, 3‚Äî–í—ã—Ä—É—á–∞—Ç)
        advertisement_1_text = await read_advertisement_file('advertisement_1.html')  # –õ—É–¥–æ—á–∞—Ç
        advertisement_2_text = await read_advertisement_file('advertisement_2.html')  # –ü—Ä–∞–∫—Ç–∏—á–∞—Ç
        advertisement_3_text = await read_advertisement_file('advertisement_3.html')  # –í—ã—Ä—É—á–∞—Ç

        logging.info(f"user_id={uid} ‚Äì buttons: {buttons}", extra={"user_id": uid})

        # 3) –î–æ—Å—Ç–∞—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤ .env)
        mapping = {row[0]["text"]: row[0]["url"] for row in buttons if row and "text" in row[0] and "url" in row[0]}
        url_ludo = mapping.get("–õ—É–¥–æ—á–∞—Ç")
        url_prak = mapping.get("–ü—Ä–∞–∫—Ç–∏—á–∞—Ç")  # –Ω–æ–≤—ã–π
        url_vyru = mapping.get("–í—ã—Ä—É—á–∞—Ç")    # –ø—Ä–µ–∂–Ω–∏–π (–≤ .env ‚Äî ¬´–í—ã—Ä—É—á–∞—Ç¬ª)

        # 4) –¢–µ–∫—Å—Ç
        intro = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä. "
            "–ò–∑—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞–ª–∞–∂–∏–≤–∞–π—Ç–µ –∂–∏–∑–Ω—å.\n\n"
        )

        parts = []
        if url_ludo:
            parts.append(f"<a href='{url_ludo}'><b>–õ—É–¥–æ—á–∞—Ç</b></a> ‚Äî {advertisement_1_text}")
        if url_prak:
            parts.append(f"<a href='{url_prak}'><b>–ü—Ä–∞–∫—Ç–∏—á–∞—Ç</b></a> ‚Äî {advertisement_2_text}")
        if url_vyru:
            parts.append(f"<a href='{url_vyru}'><b>–í—ã—Ä—É—á–∞—Ç</b></a> ‚Äî {advertisement_3_text}")

        text = intro + ("\n\n".join(parts) if parts else "–°—Å—ã–ª–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏¬ª.")

        # 5) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
        row1 = []
        if url_ludo:
            row1.append(InlineKeyboardButton(text="–õ—É–¥–æ—á–∞—Ç", url=url_ludo))
        if url_prak:
            row1.append(InlineKeyboardButton(text="–ü—Ä–∞–∫—Ç–∏—á–∞—Ç", url=url_prak))
        if url_vyru:
            row1.append(InlineKeyboardButton(text="–í—ã—Ä—É—á–∞—Ç", url=url_vyru))

        row2 = [
            InlineKeyboardButton(text="–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="section_projects"),
            InlineKeyboardButton(text="–í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", callback_data="section_anonymity"),
        ]

        keyboard_rows = []
        if row1:
            keyboard_rows.append(row1)
        keyboard_rows.append(row2)
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

        # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_chunked_message(
            uid,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=keyboard,
        )

        # 7) –õ–æ–≥-–∫–∞–Ω–∞–ª (‚úÖ —Ñ–∏–∫—Å: –∏—Å–ø–æ–ª—å–∑—É–µ–º f-—Å—Ç—Ä–æ–∫—É –¥–ª—è uid)
        try:
            log_chunks = []
            if url_ludo: log_chunks.append(f"–õ—É–¥–æ—á–∞—Ç: {url_ludo}")
            if url_prak: log_chunks.append(f"–ü—Ä–∞–∫—Ç–∏—á–∞—Ç: {url_prak}")
            if url_vyru: log_chunks.append(f"–í—ã—Ä—É—á–∞—Ç: {url_vyru}")
            if LOG_CHANNEL_ID and log_chunks:
                log_message = f"üîó –°—Å—ã–ª–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}\n" + "\n".join(log_chunks)
                await send_chunked_message(LOG_CHANNEL_ID, log_message, parse_mode=None, reply_markup=None)
        except Exception as e:
            logging.error(f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ –∫–∞–Ω–∞–ª: {e}", extra={"user_id": uid})

    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: {e}",
            extra={"user_id": uid}
        )
        raise

@router.callback_query(F.message.chat.type == ChatType.PRIVATE, F.data.startswith("refresh_"))
async def on_refresh(query: CallbackQuery):
    func_name = "on_refresh"
    uid = query.from_user.id
    try:
        await query.answer("–û–±–Ω–æ–≤–ª—è—é —Ä–µ—Å—É—Ä—Å—ã‚Ä¶")
        await send_resources_message(query.bot, query.from_user, uid, refresh=True)
    except Exception as e:
        logging.error(
            f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}",
            extra={"user_id": uid}
        )
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        except Exception as ee:
            logging.error(
                f"user_id={uid} ‚Äì –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {ee}",
                extra={"user_id": uid}
            )
