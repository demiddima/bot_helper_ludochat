# Mailing/services/broadcasts/service.py

from __future__ import annotations

import asyncio
import logging
import json
import time
from collections import Counter
from typing import Any, Dict, List, Optional, Tuple, Set

import config
from aiogram import Bot

from common.db_api_client import db_api_client
from common.utils.common import log_and_report
from common.utils.time_msk import now_msk_naive

from Mailing.services.audience import resolve_audience  # —Ä–µ–∑–æ–ª–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (ids|kind|sql)
from storage import remove_membership  # <- –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è membership
from .sender import send_actual

log = logging.getLogger(__name__)

# –ú–µ–Ω—å—à–∏–π –±–∞—Ç—á, —á—Ç–æ–±—ã —á–∞—â–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
REPORT_BATCH = 50


def _now_msk_sql() -> str:
    """'YYYY-MM-DD HH:MM:SS' (–ú–°–ö, naive) ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ë–î/—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤."""
    return now_msk_naive().strftime("%Y-%m-%d %H:%M:%S")


def _to_media_items(content: Any) -> List[Dict[str, Any]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ unified-—Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è sender.{send_actual,send_preview}.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
    1) –û–±—ë—Ä–Ω—É—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç: {"media_items": [ ... ]}
    2) –ß–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫ unified-—ç–ª–µ–º–µ–Ω—Ç–æ–≤: [ ... ]
    3) –°—Ç–∞—Ä—ã–π dict-—Ñ–æ—Ä–º–∞—Ç: {"text": "...", "files": [ {type,file_id}, ... ]}
    4) –°—Ç–∞—Ä—ã–π CSV –≤ dict: {"text":"...", "files":"id1,id2,..."}
    5) –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∫–æ–π JSON (dict –∏–ª–∏ list –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
       + –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞–∫ CSV file_id.
    """
    if isinstance(content, str):
        s = content.strip()
        if s:
            try:
                content = json.loads(s)
            except Exception:
                ids = [p.strip() for p in s.split(",") if p.strip()]
                if len(ids) > 1:
                    album_items = [{"type": "photo", "payload": {"file_id": fid}} for fid in ids[:10]]
                    return [{"type": "album", "payload": {"items": album_items}}]
                if len(ids) == 1:
                    return [{"type": "media", "payload": {"kind": "photo", "file_id": ids[0]}}]
                return []
        else:
            return []

    if isinstance(content, dict) and isinstance(content.get("media_items"), list):
        return content["media_items"]

    if isinstance(content, list):
        return content

    if not isinstance(content, dict):
        return []

    text = (content.get("text") or "").strip()
    files_any = content.get("files")
    items: List[Dict[str, Any]] = []

    if isinstance(files_any, str):
        ids = [s.strip() for s in files_any.split(",") if s.strip()]
        if len(ids) > 1:
            album_items = [{"type": "photo", "payload": {"file_id": fid}} for fid in ids[:10]]
            items.append({"type": "album", "payload": {"items": album_items}})
            if text:
                items.append({"type": "text", "payload": {"text": text}})
            return items
        if len(ids) == 1:
            payload: Dict[str, Any] = {"kind": "photo", "file_id": ids[0]}
            if text:
                payload["caption"] = text
            items.append({"type": "media", "payload": payload})
            return items
        files_any = []

    files = files_any or []
    files = files if isinstance(files, list) else []

    if len(files) > 1:
        album_items: List[Dict[str, Any]] = []
        for f in files[:10]:
            ftype = (f.get("type") or "photo").lower()
            fid = f.get("file_id")
            if not fid:
                continue
            album_items.append({"type": ftype, "payload": {"file_id": fid}})
        if album_items:
            items.append({"type": "album", "payload": {"items": album_items}})
            if text:
                items.append({"type": "text", "payload": {"text": text}})
        return items

    if len(files) == 1:
        f = files[0]
        ftype = (f.get("type") or "photo").lower()
        fid = f.get("file_id")
        if fid:
            payload: Dict[str, Any] = {"kind": ftype, "file_id": fid}
            if text:
                payload["caption"] = text
            if isinstance(f.get("caption_entities"), list):
                payload["caption_entities"] = f["caption_entities"]
            items.append({"type": "media", "payload": payload})
            return items

    if text:
        items.append({"type": "text", "payload": {"text": text}})
    return items


async def _try_materialize(broadcast_id: int, user_ids: List[int]) -> None:
    """–°–æ–∑–¥–∞—ë–º pending-–∑–∞–ø–∏—Å–∏ –≤ broadcast_deliveries (–º—è–≥–∫–∏–π noop, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)."""
    if not user_ids:
        return
    try:
        limit = min(max(1000, len(user_ids)), 200_000)
        res = await db_api_client.deliveries_materialize(
            broadcast_id, payload={"ids": user_ids, "limit": limit}
        )
        log.info(
            "materialize: id=%s total=%s created=%s existed=%s",
            broadcast_id, res.get("total"), res.get("created"), res.get("existed")
        )
    except AttributeError:
        log.debug("deliveries_materialize –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ db_api_client ‚Äî —à–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞—é")
    except Exception as e:
        log.warning("materialize %s: –æ—à–∏–±–∫–∞ %s", broadcast_id, e)


# ---- STRICT REPORT BUILDER ----

def _build_report_items_strict(items: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç –¥–ª—è API:
      {"items":[{"user_id": int, "status": "sent|failed|skipped|pending",
                 "attempt_inc": 1, "sent_at": "YYYY-MM-DD HH:MM:SS",
                 "message_id"?: int, "error_code"?: str, "error_message"?: str}]}
    None-–ø–æ–ª—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    out: List[Dict[str, Any]] = []
    ts = _now_msk_sql()
    for it in items or []:
        try:
            uid = int(it.get("user_id"))
        except Exception:
            continue
        status = it.get("status")
        if uid <= 0 or status not in ("sent", "failed", "skipped", "pending"):
            continue

        obj: Dict[str, Any] = {"user_id": uid, "status": status, "attempt_inc": 1, "sent_at": ts}

        mid = it.get("message_id")
        if isinstance(mid, int):
            obj["message_id"] = mid

        ec = it.get("error_code")
        if ec:
            obj["error_code"] = str(ec)[:64]

        em = it.get("error_message")
        if em:
            obj["error_message"] = str(em)[:500]

        out.append(obj)
    return out


async def _try_report(broadcast_id: int, items: List[Dict[str, Any]]) -> None:
    """–ë–∞—Ç—á-—Ä–µ–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    if not items:
        return
    payload_items = _build_report_items_strict(items)
    if not payload_items:
        return
    try:
        res = await db_api_client.deliveries_report(broadcast_id, items=payload_items)
        # —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤ –æ–±—ã—á–Ω—ã—Ö –ª–æ–≥–∞—Ö
        log.info("report %s: ok, sent %s items", broadcast_id, len(payload_items))
        if res:
            # –Ω–µ —É –≤—Å–µ—Ö –±–µ–∫–µ–Ω–¥–æ–≤ –µ—Å—Ç—å —Ç–µ–ª–æ; –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ
            total = res.get("updated") or res.get("count") or None
            if total is not None:
                log.info("report %s: backend updated=%s", broadcast_id, total)
    except AttributeError:
        log.debug("deliveries_report –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ db_api_client ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
    except Exception as e:
        log.warning("report %s: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞: %s", broadcast_id, e)


# ---- AUTO-CLEANUP FOR BLOCKED USERS ----

def _is_blocked_error(err_code: Optional[str], err_msg: Optional[str]) -> bool:
    s1 = (err_code or "").lower()
    s2 = (err_msg or "").lower()
    if "forbidden" in s1 and "blocked" in s1:
        return True
    return "bot was blocked by the user" in s2 or ("forbidden" in s2 and "blocked" in s2)


async def _cleanup_after_block(user_id: int) -> None:
    """–£–¥–∞–ª—è–µ–º membership —Ç–æ–ª—å–∫–æ –ø–æ BOT_ID –∏ –∑–∞–ø–∏—Å—å –≤ user_subscriptions."""
    # 1) membership (—Ç–æ–ª—å–∫–æ –±–æ—Ç)
    try:
        await remove_membership(user_id, config.BOT_ID)
        m_ok = True
    except Exception as exc:
        m_ok = False
        log.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ remove_membership(bot): %s", user_id, exc, extra={"user_id": user_id})

    # 2) user_subscriptions
    try:
        await db_api_client.delete_user_subscriptions(user_id)
        s_ok = True
    except Exception as exc:
        s_ok = False
        log.error("user_id=%s ‚Äì –û—à–∏–±–∫–∞ delete_user_subscriptions: %s", user_id, exc, extra={"user_id": user_id})

    log.info(
        "user_id=%s ‚Äì –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ Forbidden: %s, %s",
        user_id,
        "membership(bot)=OK" if m_ok else "membership(bot)=ERR",
        "subscriptions=OK" if s_ok else "subscriptions=ERR",
        extra={"user_id": user_id},
    )


async def _notify_admins_about_broadcast(
    bot: Bot,
    *,
    b: dict,
    total: int,
    sent: int,
    failed: int,
    started_ts: float,
    errors_counter: Counter,
) -> None:
    admins = getattr(config, "ID_ADMIN_USER", set()) or set()
    if not admins:
        return
    dur = max(0.0, time.time() - started_ts)
    title = (b.get("title") or "").strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    bid = b.get("id")

    parts = [
        f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ #{bid}</b>",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <i>{title}</i>",
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{total}</b>",
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent}</b>",
        f"–û—à–∏–±–æ–∫: <b>{failed}</b>",
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{dur:.1f}—Å</code>",
    ]

    if errors_counter:
        top = ", ".join(f"{k or 'Unknown'}={v}" for k, v in errors_counter.most_common(5))
        parts.append(f"–û—à–∏–±–∫–∏ (—Ç–æ–ø): {top}")

    text = "\n".join(parts)
    for uid in admins:
        try:
            await bot.send_message(uid, text, disable_web_page_preview=True)
        except Exception as e:
            log.warning("admin notify failed user_id=%s: %s", uid, e)


async def send_broadcast(bot: Bot, broadcast: dict, throttle_per_sec: Optional[int] = None) -> Tuple[int, int]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: —á–∏—Ç–∞–µ—Ç broadcast['content'], —Ä–µ–∑–æ–ª–≤–∏—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —à–ª—ë—Ç –∫–∞–∂–¥–æ–º—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sent, failed).
    """
    bid = broadcast["id"]
    rate = throttle_per_sec or getattr(config, "BROADCAST_RATE_PER_SEC", 29)
    rate = max(1, int(rate))
    window = 1.0 / rate

    raw_content = broadcast.get("content")
    media_items = _to_media_items(raw_content)
    if not media_items:
        log.error("–†–∞—Å—Å—ã–ª–∫–∞ id=%s –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: content –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω", bid)
        return 0, 0

    # 2) –ê—É–¥–∏—Ç–æ—Ä–∏—è
    try:
        target = await db_api_client.get_broadcast_target(bid)
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ id=%s: %s", bid, e)
        return 0, 0

    audience = await resolve_audience(target)
    if not audience:
        log.warning("–†–∞—Å—Å—ã–ª–∫–∞ id=%s –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è", bid)
        return 0, 0

    # 3) –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º pending
    await _try_materialize(bid, audience)

    log.info("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É id=%s: –∞—É–¥–∏—Ç–æ—Ä–∏—è=%s, —Å–∫–æ—Ä–æ—Å—Ç—å=%s msg/—Å", bid, len(audience), rate)

    sent = 0
    failed = 0
    report_buf: List[Dict[str, Any]] = []

    cleaned_blocked: Set[int] = set()
    blocked_failed_count = 0
    errors_counter: Counter = Counter()
    started_ts = time.time()

    async def _flush():
        nonlocal report_buf
        if report_buf:
            await _try_report(bid, report_buf)
            report_buf.clear()

    # 4) –¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ + –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–ø–æ—Ä—Ç
    try:
        for uid in audience:
            ok, msg_id, err_code, err_msg = await send_actual(bot, uid, media_items, kb_for_text=None)
            if ok:
                sent += 1
                report_buf.append({"user_id": uid, "status": "sent", "message_id": msg_id})
            else:
                failed += 1
                errors_counter.update([err_code or "Unknown"])
                report_buf.append({
                    "user_id": uid,
                    "status": "failed",
                    "message_id": msg_id,
                    "error_code": err_code,
                    "error_message": (err_msg[:1000] if err_msg else None),
                })

                # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–∞ Forbidden (bot blocked)
                if uid not in cleaned_blocked and _is_blocked_error(err_code, err_msg):
                    await _cleanup_after_block(uid)
                    cleaned_blocked.add(uid)
                    blocked_failed_count += 1

            if len(report_buf) >= REPORT_BATCH:
                await _flush()

            await asyncio.sleep(window)
    finally:
        # –¥–æ–±—Ä–æ—Å–∏–º —Ö–≤–æ—Å—Ç –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ
        await _flush()
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º ‚Äî –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞/–æ—à–∏–±–∫–∏
        try:
            await _notify_admins_about_broadcast(
                bot,
                b=broadcast,
                total=len(audience),
                sent=sent,
                failed=failed,
                started_ts=started_ts,
                errors_counter=errors_counter,
            )
        except Exception as e:
            log.warning("notify admins failed for broadcast %s: %s", bid, e)

    # 5) –ò—Ç–æ–≥–æ–≤—ã–µ –ª–æ–≥–∏
    if sent == 0 and failed > 0:
        if blocked_failed_count == failed:
            log.info(
                "–†–∞—Å—Å—ã–ª–∫–∞ id=%s: –∞—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤—Å–µ –∞–¥—Ä–µ—Å–∞—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞). "
                "–û—à–∏–±–æ–∫ –Ω–µ —Å–æ–∑–¥–∞—ë–º, –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", bid
            )
        else:
            log.error("–†–∞—Å—Å—ã–ª–∫–∞ id=%s –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∫–æ–º—É (–æ—à–∏–±–æ–∫=%s)", bid, failed)
            try:
                await log_and_report(Exception("broadcast failed"), f"–†–∞—Å—Å—ã–ª–∫–∞ {bid} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: –æ—à–∏–±–æ–∫={failed}")
            except Exception:
                pass
    elif failed > 0:
        log.warning("–†–∞—Å—Å—ã–ª–∫–∞ id=%s –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%s, –æ—à–∏–±–æ–∫=%s", bid, sent, failed)
    else:
        log.info("–†–∞—Å—Å—ã–ª–∫–∞ id=%s –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%s", bid, sent)

    return sent, failed


async def mark_broadcast_sent(broadcast_id: int) -> dict:
    log.info("–ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É id=%s –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é", broadcast_id)
    return await db_api_client.update_broadcast(broadcast_id, status="sent")


async def try_send_now(bot: Bot, broadcast_id: int) -> None:
    """
    –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫:
      1) —Å—Ç–∞—Ç—É—Å 'sending'
      2) send_broadcast(...)
      3) –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ‚Äî 'sent', –∏–Ω–∞—á–µ 'failed'
    """
    try:
        b = await db_api_client.get_broadcast(broadcast_id)
        log.info("–ü–æ–ª—É—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ id=%s –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞", broadcast_id)
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É id=%s: %s", broadcast_id, e)
        return

    try:
        await db_api_client.update_broadcast(broadcast_id, status="sending")
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 'sending' –¥–ª—è id=%s: %s", broadcast_id, e)

    try:
        sent, failed = await send_broadcast(bot, b)
        if sent > 0:
            await mark_broadcast_sent(broadcast_id)
        else:
            try:
                await db_api_client.update_broadcast(broadcast_id, status="failed")
            except Exception as e2:
                log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å 'failed' id=%s: %s", broadcast_id, e2)
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ id=%s: %s", broadcast_id, e)
        try:
            await db_api_client.update_broadcast(broadcast_id, status="failed")
        except Exception as e2:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å 'failed' id=%s –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: %s", broadcast_id, e2)


__all__ = ["send_broadcast", "try_send_now", "mark_broadcast_sent"]
