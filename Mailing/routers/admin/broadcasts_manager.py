# Mailing/routers/admin/broadcasts_manager.py
# –ö–æ–º–º–∏—Ç: feat(manager/schedule): –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ ‚Äî —Å—Ä–∞–∑—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (schedule_after_create)
from __future__ import annotations

import logging
from dataclasses import dataclass
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.exceptions import TelegramBadRequest

from common.db_api_client import db_api_client
from Mailing.keyboards.broadcasts_manager import kb_bm_list, kb_bm_item
from Mailing.services.schedule import (
    parse_and_preview,
    format_preview,
    is_oneoff_text,
    ScheduleError,
)
from Mailing.services.broadcasts import try_send_now
from Mailing.services.local_scheduler import schedule_after_create  # ‚Üê –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)

log = logging.getLogger(__name__)
router = Router(name="admin_broadcasts_manager")


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π state –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ----------
@dataclass
class BMEditState:
    broadcast_id: int
    card_chat_id: Optional[int] = None
    card_message_id: Optional[int] = None


# ---------- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã ----------
def _item_header(b: Dict[str, Any]) -> str:
    bid = b.get("id")
    ttl = (b.get("title") or "").strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    sch = (b.get("schedule") or "").strip() or "‚Äî"
    en = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if b.get("enabled") else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
    return (
        f"<b>–†–∞—Å—Å—ã–ª–∫–∞ #{bid}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <i>{ttl}</i>\n"
        f"Schedule: <code>{sch}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: {en}"
    )


async def _item_preview_text(b: Dict[str, Any]) -> str:
    sch = (b.get("schedule") or "").strip()
    if not sch:
        return _item_header(b) + "\n\n(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ)"
    try:
        kind, dates = parse_and_preview(sch, count=5)
        return _item_header(b) + "\n\n" + format_preview(kind, dates)
    except ScheduleError as e:
        return _item_header(b) + f"\n\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"


# ---------- –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö (7 –¥–Ω–µ–π) ----------
@router.message(Command("broadcasts"))
async def bm_list(message: Message, state: FSMContext):
    await _show_page(message, offset=0, limit=50)


@router.callback_query(F.data.startswith("bm:page:"))
async def bm_page(cb: CallbackQuery, state: FSMContext):
    offset = int(cb.data.split(":")[2])
    await cb.answer()
    await _show_page(cb.message, offset=offset, limit=50)


async def _show_page(target_message: Message, *, offset: int, limit: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–ø–∞–¥–∞–µ—Ç
    –≤ –æ–∫–Ω–æ [—Å–µ–π—á–∞—Å .. +7 –¥–Ω–µ–π] –ø–æ –ú–°–ö. –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    now_msk = datetime.now(ZoneInfo("Europe/Moscow"))
    horizon = now_msk + timedelta(days=7)

    try:
        # –ë–µ—Ä—ë–º –∑–∞–ø–∞—Å–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî API –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ ¬´7 –¥–Ω–µ–π¬ª.
        all_items: List[Dict[str, Any]] = await db_api_client.list_broadcasts(
            status="scheduled",   # —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            enabled=None,         # –∏ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ, –∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ
            limit=500,            # —à–∏—Ä–æ–∫–∏–π –ª–∏–º–∏—Ç, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–∞ 7 –¥–Ω–µ–π
            offset=0,
        )
    except Exception as e:
        log.error("bm: list_broadcasts error: %s", e)
        await target_message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫.")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ –∑–∞–ø—É—Å–∫–∞
    filtered: List[Dict[str, Any]] = []
    for b in all_items:
        schedule_text = (b.get("schedule") or "").strip()
        if not schedule_text:
            continue
        try:
            # –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–ø—É—Å–∫ (count=1)
            _kind, dates = parse_and_preview(schedule_text, count=1)
            next_dt = dates[0]
            if now_msk <= next_dt <= horizon:
                b = dict(b)
                b["_next_dt"] = next_dt
                filtered.append(b)
        except ScheduleError:
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–ª–∏–∂–∞–π—à–µ–º—É –∑–∞–ø—É—Å–∫—É
    filtered.sort(key=lambda it: it.get("_next_dt"))

    page_items = filtered[offset: offset + limit]
    has_more = (offset + limit) < len(filtered)

    if not page_items and offset > 0:
        await target_message.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    if not page_items:
        await target_message.answer("–ó–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
        return

    await target_message.answer(
        "<b>–ë–ª–∏–∂–∞–π—à–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (7 –¥–Ω–µ–π)</b>\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é:",
        reply_markup=kb_bm_list(page_items, offset=offset, limit=limit, has_more=has_more),
        disable_web_page_preview=True,
    )


# ---------- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ----------
@router.callback_query(F.data.startswith("bm:open:"))
async def bm_open(cb: CallbackQuery, state: FSMContext):
    bid = int(cb.data.split(":")[2])
    await cb.answer()
    try:
        b = await db_api_client.get_broadcast(bid)
    except Exception as e:
        log.error("bm: get_broadcast(%s) error: %s", bid, e)
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    await _safe_edit_card(cb.message, bid, b)


# ---------- Toggle enabled ----------
@router.callback_query(F.data.startswith("bm:toggle:"))
async def bm_toggle(cb: CallbackQuery, state: FSMContext):
    bid = int(cb.data.split(":")[2])
    await cb.answer()
    try:
        b = await db_api_client.get_broadcast(bid)
        new_enabled = not bool(b.get("enabled"))
        await db_api_client.update_broadcast(bid, enabled=new_enabled)
        b = await db_api_client.get_broadcast(bid)
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
        if b.get("enabled") and (b.get("status") == "scheduled") and (b.get("schedule") or "").strip():
            try:
                await schedule_after_create(cb.message.bot, bid)
            except Exception as e:
                log.warning("bm: toggle schedule_after_create warn id=%s: %s", bid, e)
    except Exception as e:
        log.error("bm: toggle enabled error id=%s: %s", bid, e)
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω–∏—è.")
        return

    await _safe_edit_card(cb.message, bid, b)


# ---------- –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≤–≤–æ–¥ —Å—Ç—Ä–æ–∫–æ–π) ----------
@router.callback_query(F.data.startswith("bm:edit:"))
async def bm_edit(cb: CallbackQuery, state: FSMContext):
    bid = int(cb.data.split(":")[2])
    await cb.answer()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ö–ê–ö–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    await state.update_data(
        bm_edit=BMEditState(
            broadcast_id=bid,
            card_chat_id=cb.message.chat.id,
            card_message_id=cb.message.message_id,
        ).__dict__
    )
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        "‚Ä¢ —Ä–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ ‚Äî <code>–î–î.–ú–ú.–ì–ì–ì–ì HH:MM</code> (–ú–°–ö)\n"
        "‚Ä¢ cron ‚Äî 5 –ø–æ–ª–µ–π, –Ω–∞–ø—Ä. <code>0 15 * * 1</code>",
        reply_markup=None,
        disable_web_page_preview=True,
    )


@router.message(F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def bm_edit_input(message: Message, state: FSMContext):
    data = await state.get_data()
    st_raw = data.get("bm_edit")
    if not st_raw:
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    st = BMEditState(**st_raw)
    bid = int(st.broadcast_id)
    schedule_text = (message.text or "").strip()

    # –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–≤—å—é (–∫–∞–∫ –≤ –≤–∏–∑–∞—Ä–¥–µ)
    try:
        kind, dates = parse_and_preview(schedule_text, count=5)
        _ = format_preview(kind, dates)
    except ScheduleError as e:
        await message.answer(f"‚ùå {e}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    try:
        await db_api_client.update_broadcast(bid, schedule=schedule_text)
        b = await db_api_client.get_broadcast(bid)
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if b.get("enabled") and (b.get("status") == "scheduled") and (b.get("schedule") or "").strip():
            try:
                await schedule_after_create(message.bot, bid)
            except Exception as e:
                log.warning("bm: edit schedule_after_create warn id=%s: %s", bid, e)
    except Exception as e:
        log.error("bm: update schedule error id=%s: %s", bid, e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n{await _item_preview_text(b)}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ò–ú–ï–ù–ù–û —Ç—É –∫–∞—Ä—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å (–ø–æ id)
    if st.card_chat_id and st.card_message_id:
        await _safe_edit_card_by_id(
            bot=message.bot,
            chat_id=st.card_chat_id,
            message_id=st.card_message_id,
            bid=bid,
            b=b,
        )
    else:
        # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–∏—à–ª—ë–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        await message.answer(
            await _item_preview_text(b),
            reply_markup=kb_bm_item(bid, enabled=bool(b.get("enabled"))),
            disable_web_page_preview=True,
        )

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(bm_edit=None)


# ---------- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å ----------
async def _materialize_cron_child_and_send(bot, tpl: Dict[str, Any]) -> None:
    tpl_id = int(tpl["id"])
    title = tpl.get("title") or ""
    kind = tpl.get("kind") or "news"
    content = tpl.get("content") or {"text": "", "files": ""}

    child = await db_api_client.create_broadcast(
        kind=kind,
        title=title,
        content=content,
        status="draft",     # –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        schedule=None,      # —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        enabled=False,      # –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    )
    child_id = int(child["id"])

    try:
        tgt = await db_api_client.get_broadcast_target(tpl_id)
    except Exception as e:
        log.warning("bm: send_now cron ‚Äî –Ω–µ—Ç/–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç —à–∞–±–ª–æ–Ω–∞ id=%s: %s", tpl_id, e)
        tgt = None

    if tgt:
        try:
            await db_api_client.put_broadcast_target(child_id, tgt)
        except Exception as e:
            log.warning("bm: send_now cron ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –¥–ª—è child id=%s: %s", child_id, e)

    await try_send_now(bot=bot, broadcast_id=child_id)


@router.callback_query(F.data.startswith("bm:send:"))
async def bm_send_now(cb: CallbackQuery, state: FSMContext):
    bid = int(cb.data.split(":")[2])
    await cb.answer()

    sent_ok = False
    try:
        b = await db_api_client.get_broadcast(bid)
    except Exception as e:
        log.error("bm: send_now get_broadcast id=%s error=%s", bid, e)
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    schedule_text = (b.get("schedule") or "").strip()
    if not schedule_text:
        await cb.message.answer("–£ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞–∑–æ–≤—É—é –∏–ª–∏ cron.")
        return

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    try:
        if is_oneoff_text(schedule_text):
            # try_send_now —Å–∞–º –æ—Ç–º–µ—Ç–∏—Ç —Å—Ç–∞—Ç—É—Å; –º—ã —Ç–æ–ª—å–∫–æ –≤—ã–∫–ª—é—á–∏–º –∑–∞–ø–∏—Å—å
            await try_send_now(cb.message.bot, bid)
            sent_ok = True
            try:
                await db_api_client.update_broadcast(bid, enabled=False)
            except Exception as e:
                log.warning("bm: send_now oneoff ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å id=%s: %s", bid, e)
        else:
            await _materialize_cron_child_and_send(cb.message.bot, b)
            sent_ok = True
    except Exception as e:
        log.error("bm: send_now –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–ø–∞–ª–∞ id=%s: %s", bid, e)

    # 2) –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —Ñ–∞–∫—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    if sent_ok:
        if is_oneoff_text(schedule_text):
            await cb.message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ one-off –∏ –∑–∞–ø–∏—Å—å –≤—ã–∫–ª—é—á–µ–Ω–∞: #{bid}")
        else:
            await cb.message.answer(f"‚úÖ Cron-—à–∞–±–ª–æ–Ω #{bid}: —Å–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫.")
    else:
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å.")
        return

    # 3) –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    try:
        b2 = await db_api_client.get_broadcast(bid)
    except Exception as e:
        log.warning("bm: send_now ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å id=%s: %s", bid, e)
        return

    await _safe_edit_card(cb.message, bid, b2)


# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É Message ----------
async def _safe_edit_card(msg: Message, bid: int, b: Dict[str, Any]) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ¬´–º—è–≥–∫–æ¬ª —á–µ—Ä–µ–∑ Message API.
    –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —à–ª—ë–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ WARN.
    """
    await _safe_edit_card_by_id(
        bot=msg.bot,
        chat_id=msg.chat.id,
        message_id=msg.message_id,
        bid=bid,
        b=b,
    )


# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ chat_id/message_id ----------
async def _safe_edit_card_by_id(bot, chat_id: int, message_id: int, bid: int, b: Dict[str, Any]) -> None:
    new_text = await _item_preview_text(b)
    new_markup = kb_bm_item(bid, enabled=bool(b.get("enabled")))

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                reply_markup=new_markup,
                disable_web_page_preview=True,
            )
            return
        except TelegramBadRequest as e:
            low = str(e).lower()
            if "message is not modified" in low:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ markup
                try:
                    await bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=new_markup,
                    )
                    return
                except TelegramBadRequest as e2:
                    if "message is not modified" in str(e2).lower():
                        return
                    raise
            # –ü—Ä–æ–±—Ä–æ—Å–∏–º –¥–∞–ª—å—à–µ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ–ª–±—ç–∫
            raise

    except TelegramBadRequest as e:
        low = str(e).lower()
        if "message can't be edited" in low or "message to edit not found" in low:
            # –§–æ–ª–±—ç–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=new_text,
                    reply_markup=new_markup,
                    disable_web_page_preview=True,
                )
                return
            except Exception as ee:
                log.warning("bm: fallback send failed id=%s: %s", bid, ee)
                return
        if "message is not modified" in low:
            return
        log.warning("bm: edit_text warn id=%s: %s", bid, e)
    except Exception as e:
        log.warning("bm: edit_text unexpected id=%s: %s", bid, e)
