# handlers/admin/broadcasts_wizard/steps_audience_kind.py
# commit: extract title/kind + audience steps
from __future__ import annotations

from html import escape as _html_escape
from typing import Dict, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

from . import PostWizard
from Mailing.keyboards.broadcasts_wizard import kb_kinds, kb_audience, kb_schedule
from Mailing.services.audience import normalize_ids, audience_preview_text

router = Router(name="admin_broadcasts_wizard.audience_kind")


@router.message(PostWizard.title_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def title_input(message: Message, state: FSMContext):
    title = (message.text or "").strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(title=title)
    await state.set_state(PostWizard.choose_kind)
    await message.answer("–í—ã–±–µ—Ä–∏ <b>—Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏</b>:", reply_markup=kb_kinds())


@router.callback_query(PostWizard.choose_kind, F.data.startswith("kind:"))
async def kind_pick(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    kind = cb.data.split(":", 1)[1]
    await state.update_data(kind=kind)
    await state.set_state(PostWizard.choose_audience)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=kb_audience())


@router.callback_query(F.data == "back:kind")
async def back_to_kind(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PostWizard.choose_kind)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ <b>—Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏</b>:", reply_markup=kb_kinds())


@router.callback_query(PostWizard.choose_audience, F.data == "aud:all")
async def aud_all(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    kind = (data or {}).get("kind")
    if not kind:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return

    target = {"type": "kind", "kind": kind}
    await state.update_data(target=target)

    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await cb.message.edit_text(f"{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=kb_schedule())


@router.callback_query(PostWizard.choose_audience, F.data == "aud:ids")
async def aud_ids(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PostWizard.audience_ids_wait)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ <b>user_id</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.\n–ü—Ä–∏–º–µ—Ä: <code>123 456 789</code>"
    )


@router.message(PostWizard.audience_ids_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def aud_ids_input(message: Message, state: FSMContext):
    ids = normalize_ids(message.text or "")
    if not ids:
        await message.answer("–ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return
    target = {"type": "ids", "user_ids": ids}
    await state.update_data(target=target)
    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await message.answer(
        f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{len(ids)} ID</b>\n{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=kb_schedule(),
    )


@router.callback_query(PostWizard.choose_audience, F.data == "aud:sql")
async def aud_sql(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PostWizard.audience_sql_wait)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏ <b>SELECT</b>, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü <code>user_id</code>.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>SELECT id AS user_id FROM users WHERE ...</code>\n"
        "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: <code>users, user_memberships, user_subscriptions, chats</code>"
    )


@router.message(PostWizard.audience_sql_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def aud_sql_input(message: Message, state: FSMContext):
    sql = (message.text or "").strip()
    if not sql.lower().startswith("select"):
        await message.answer("–¢–æ–ª—å–∫–æ SELECT-–∑–∞–ø—Ä–æ—Å—ã. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL.")
        return
    target = {"type": "sql", "sql": sql}
    await state.update_data(target=target)
    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await message.answer(
        f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>SQL</b>\n<code>{_html_escape(sql)}</code>\n\n{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=kb_schedule(),
    )


@router.callback_query(F.data == "back:aud")
async def back_audience(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(PostWizard.choose_audience)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=kb_audience())
