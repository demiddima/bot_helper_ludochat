# Mailing/routers/admin/broadcasts_wizard/steps_audience_kind.py
# –ö–æ–º–º–∏—Ç: fix(wizard/audience): target(type='kind', kind=<selected>) –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ 'all' ‚Äî —á–∏–Ω–∏—Ç 422 –Ω–∞ –ø—Ä–µ–≤—å—é
from __future__ import annotations

from html import escape as _html_escape
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

from . import PostWizard
from Mailing.keyboards.broadcasts_wizard import kb_kinds, kb_audience, kb_schedule
from Mailing.services.audience import normalize_ids, audience_preview_text

router = Router(name="admin_broadcasts_wizard.audience_kind")


# ---------- –ù–∞–∑–≤–∞–Ω–∏–µ ----------
@router.message(PostWizard.title_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def title_input(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ —Å–ø–∏—Å–∫–∞—Ö/–ø–æ–∏—Å–∫–µ).
    """
    title = (message.text or "").strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    await state.update_data(title=title)
    await state.set_state(PostWizard.choose_kind)
    await message.answer(
        "<b>–®–∞–≥ 3. –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ –ø–æ—Å—Ç ‚Äî –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=kb_kinds(),
    )


# ---------- –¢–∏–ø ----------
@router.callback_query(PostWizard.choose_kind, F.data.startswith("kind:"))
async def choose_kind(cb: CallbackQuery, state: FSMContext):
    """
    –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–∏–ø (news / meetings / important) –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    """
    await cb.answer()
    kind = cb.data.split(":", 1)[1]
    await state.update_data(kind=kind)
    await state.set_state(PostWizard.choose_audience)
    await cb.message.edit_text(
        "<b>–®–∞–≥ 4. –ê—É–¥–∏—Ç–æ—Ä–∏—è</b>\n"
        "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º? –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=kb_audience(),
        disable_web_page_preview=True,
    )


@router.callback_query(F.data == "back:kind")
async def back_kind(cb: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞.
    """
    await cb.answer()
    await state.set_state(PostWizard.choose_kind)
    await cb.message.edit_text(
        "–í–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=kb_kinds(),
    )


# ---------- –ê—É–¥–∏—Ç–æ—Ä–∏—è: KIND (–≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞) ----------
@router.callback_query(PostWizard.choose_audience, F.data == "aud:all")
async def aud_all(cb: CallbackQuery, state: FSMContext):
    """
    –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
    –í–ê–ñ–ù–û: backend (—Å–º. /audiences/preview –∏ put_target) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç type ‚àà {ids, sql, kind}.
    –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º target —Å type='kind' –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º kind.
    """
    await cb.answer()
    data = await state.get_data()
    kind = (data.get("kind") or "news").strip()

    # ‚Üê –∫–ª—é—á–µ–≤–∞—è –ø—Ä–∞–≤–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º type='kind'
    target = {"type": "kind", "kind": kind}
    await state.update_data(target=target)

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—á—Ç–æ–±—ã —Å–ª–æ–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ä–∞–∑—É)
    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await cb.message.edit_text(
        f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>–≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Ç–∏–ø–∞ ¬´{kind}¬ª</b>\n{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=kb_schedule(),
        disable_web_page_preview=True,
    )


# ---------- –ê—É–¥–∏—Ç–æ—Ä–∏—è: IDs ----------
@router.callback_query(PostWizard.choose_audience, F.data == "aud:ids")
async def aud_ids(cb: CallbackQuery, state: FSMContext):
    """
    –†—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ Telegram user_id (—á–∏—Å–ª–∞) ‚Äî —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
    """
    await cb.answer()
    await state.set_state(PostWizard.audience_ids_wait)
    await cb.message.edit_text(
        "<b>–í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö user_id</b> ‚Äî —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>123 456 789</code>",
        reply_markup=None,
        disable_web_page_preview=True,
    )


@router.message(PostWizard.audience_ids_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def aud_ids_input(message: Message, state: FSMContext):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID ‚Üí –ø—Ä–µ–≤—å—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ‚Üí –≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    ids = normalize_ids(message.text or "")
    if not ids:
        await message.answer("–ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return
    target = {"type": "ids", "user_ids": ids}
    await state.update_data(target=target)
    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await message.answer(
        f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{len(ids)} ID</b>\n{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=kb_schedule(),
        disable_web_page_preview=True,
    )


# ---------- –ê—É–¥–∏—Ç–æ—Ä–∏—è: SQL ----------
@router.callback_query(PostWizard.choose_audience, F.data == "aud:sql")
async def aud_sql(cb: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π SELECT, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü user_id.
    """
    await cb.answer()
    await state.set_state(PostWizard.audience_sql_wait)
    await cb.message.edit_text(
        "<b>–í–≤–µ–¥–∏ SELECT</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü <code>user_id</code>.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>SELECT user_id FROM users WHERE city = 'Moscow'</code>\n"
        "‚Ä¢ <code>SELECT id AS user_id FROM leads WHERE subscribed=1</code>",
        reply_markup=None,
        disable_web_page_preview=True,
    )


@router.message(PostWizard.audience_sql_wait, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def aud_sql_input(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º SQL (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å SELECT), —Å—Ç—Ä–æ–∏–º –ø—Ä–µ–≤—å—é, –∑–∞—Ç–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    sql = (message.text or "").strip()
    if not sql.lower().startswith("select"):
        await message.answer("–û–∂–∏–¥–∞—é –∑–∞–ø—Ä–æ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å SELECT.")
        return
    target = {"type": "sql", "query": sql}
    await state.update_data(target=target)
    prev = await audience_preview_text(target)
    await state.set_state(PostWizard.choose_schedule)
    await message.answer(
        f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>SQL</b>\n<code>{_html_escape(sql)}</code>\n\n{prev}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=kb_schedule(),
        disable_web_page_preview=True,
    )


# ---------- –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ----------
@router.callback_query(F.data == "back:aud")
async def back_audience(cb: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    """
    await cb.answer()
    await state.set_state(PostWizard.choose_audience)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=kb_audience())
