# Mailing/routers/admin/broadcasts_wizard/steps_schedule_finalize.py
# commit: fix(wizard/finalize): —Å–æ—Ö—Ä–∞–Ω—è–µ–º content –∫–∞–∫ {"text": "...", "files": "id1,id2,..."} –∏–∑ media_items

from __future__ import annotations

import logging
from typing import Optional, Union, List, Dict, Any
from datetime import datetime
from zoneinfo import ZoneInfo
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

from . import PostWizard
from Mailing.keyboards.broadcasts_wizard import kb_schedule  # –Ω–∞ –±—É–¥—É—â–µ–µ
from common.utils.time_msk import parse_msk
from common.db_api import db_api_client
from Mailing.services.broadcasts.service import try_send_now
from Mailing.services.local_scheduler import schedule_broadcast_send

log = logging.getLogger(__name__)
router = Router(name="admin_broadcasts_wizard.schedule_finalize")
MSK = ZoneInfo("Europe/Moscow")


def _to_csv_content(media_items: List[Dict[str, Any]]) -> Dict[str, str]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º unified media_items –≤ –æ–∂–∏–¥–∞–µ–º—ã–π backend-—Ñ–æ—Ä–º–∞—Ç:
      {"text": "<html...>", "files": "id1,id2,..."}
    –ü—Ä–∞–≤–∏–ª–∞:
      - text –±–µ—Ä—ë–º –∏–∑ –ü–û–°–õ–ï–î–ù–ï–ì–û —ç–ª–µ–º–µ–Ω—Ç–∞ {"type":"text"|"html"} –∏–ª–∏ caption —É single media, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
      - file_id —Å–æ–±–∏—Ä–∞–µ–º –∏–∑:
         * {"type":"media"} ‚Üí payload.file_id
         * {"type":"album"} ‚Üí –∏–∑ –∫–∞–∂–¥–æ–≥–æ items[i].payload.file_id (–¥–æ 10 —à—Ç ‚Äî –ª–∏–º–∏—Ç TG)
      - –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.
    """
    text = ""
    ids: List[str] = []

    for el in media_items or []:
        t = (el.get("type") or "").lower()
        p = el.get("payload") or {}

        if t in {"text", "html"}:
            txt = (p.get("text") or "").strip()
            if txt:
                text = txt

        elif t == "media":
            fid = (p.get("file_id") or "").strip()
            if fid:
                ids.append(fid)
            # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ ‚Äî –º–æ–∂–Ω–æ –≤–∑—è—Ç—å caption –∫–∞–∫ —Ç–µ–∫—Å—Ç
            if not text:
                cap = (p.get("caption") or "").strip()
                if cap:
                    text = cap

        elif t == "album":
            items = (p.get("items") or [])[:10]  # –ª–∏–º–∏—Ç TG 10
            for it in items:
                it_fid = ((it.get("payload") or {}).get("file_id") or "").strip()
                if it_fid:
                    ids.append(it_fid)

    return {"text": text, "files": ",".join(ids)}


@router.callback_query(PostWizard.choose_schedule, F.data == "sch:now")
async def sch_now(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await _finalize_and_start(cb, state, mode="now", at=None)


@router.callback_query(PostWizard.choose_schedule, F.data == "sch:manual")
async def sch_manual(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è <b>–≤ –ú–°–ö</b> –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>YYYY-MM-DD HH:MM</code>\n"
        "‚Ä¢ <code>DD.MM.YYYY HH:MM</code>\n\n"
        "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow."
    )


@router.message(PostWizard.choose_schedule, F.content_type == ContentType.TEXT, ~F.text.regexp(r"^/"))
async def sch_manual_input(message: Message, state: FSMContext):
    dt = parse_msk(message.text or "")
    if not dt:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: <code>2025-08-23 20:30</code> (–ú–°–ö)")
        return
    await _finalize_and_start(message, state, mode="at", at=dt)


async def _finalize_and_start(evt: Union[Message, CallbackQuery], state: FSMContext, *, mode: str, at: Optional[datetime]):
    data = await state.get_data()
    media_items = data.get("content_media")  # unified —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–≤—å—é
    title = data.get("title")
    kind = data.get("kind")
    target = data.get("target")

    if not media_items or not title or not kind or not target:
        txt = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /post"
        if isinstance(evt, CallbackQuery):
            await evt.message.answer(txt)
        else:
            await evt.answer(txt)
        await state.clear()
        return

    # –í–ê–ñ–ù–û: backend –æ–∂–∏–¥–∞–µ—Ç {"text": "...", "files": "id1,id2,..."}
    content_csv = _to_csv_content(media_items)

    br = await db_api_client.create_broadcast(
        kind=kind,
        title=title,
        content=content_csv,
        status="draft",
    )
    await db_api_client.put_broadcast_target(br["id"], target)

    bot = evt.message.bot if isinstance(evt, CallbackQuery) else evt.bot
    if mode == "now":
        await try_send_now(bot, br["id"])
        txt = f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: <b>#{br['id']}</b>"
    else:
        at_msk = at.astimezone(MSK)
        msk_naive = at_msk.replace(tzinfo=None)
        iso_naive = msk_naive.strftime("%Y-%m-%d %H:%M:%S")
        await db_api_client.update_broadcast(br["id"], status="scheduled", scheduled_at=iso_naive)
        schedule_broadcast_send(bot, br["id"], at_msk)
        txt = f"üíæ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: <b>#{br['id']}</b> –Ω–∞ {iso_naive} (–ú–°–ö)"

    if isinstance(evt, CallbackQuery):
        await evt.message.answer(txt)
    else:
        await evt.answer(txt)
    await state.clear()
